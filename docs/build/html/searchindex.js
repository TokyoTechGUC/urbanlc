Search.setIndex({"docnames": ["_autosummary/urbanlc", "_autosummary/urbanlc.analyze", "_autosummary/urbanlc.analyze.constant", "_autosummary/urbanlc.analyze.evaluate", "_autosummary/urbanlc.analyze.metrics", "_autosummary/urbanlc.analyze.visualizer", "_autosummary/urbanlc.downloader", "_autosummary/urbanlc.downloader.base", "_autosummary/urbanlc.downloader.downloader_constant", "_autosummary/urbanlc.downloader.esa2021_downloader", "_autosummary/urbanlc.downloader.general", "_autosummary/urbanlc.downloader.landsat_downloader", "_autosummary/urbanlc.downloader.logger", "_autosummary/urbanlc.model", "_autosummary/urbanlc.model.base", "_autosummary/urbanlc.model.baseline", "_autosummary/urbanlc.model.dataloader", "_autosummary/urbanlc.model.deep_learning", "_autosummary/urbanlc.model.download", "_autosummary/urbanlc.model.pipeline_transforms", "_autosummary/urbanlc.model.train_utils", "_autosummary/urbanlc.utils", "api", "generated/urbanlc.analyze.metrics", "generated/urbanlc.analyze.metrics.accuracy", "generated/urbanlc.analyze.metrics.cohen_kappa", "generated/urbanlc.analyze.metrics.confusion_matrix", "generated/urbanlc.analyze.metrics.get_class_distribution", "generated/urbanlc.analyze.metrics.producer_accuracy", "generated/urbanlc.analyze.metrics.user_accuracy", "generated/urbanlc.analyze.visualizer", "generated/urbanlc.analyze.visualizer.get_esa_colormap", "generated/urbanlc.analyze.visualizer.plot_change", "generated/urbanlc.analyze.visualizer.plot_class_distribution", "generated/urbanlc.analyze.visualizer.plot_land_cover", "generated/urbanlc.analyze.visualizer.plot_landsat", "generated/urbanlc.analyze.visualizer.show_esa_label", "generated/urbanlc.analyze.visualizer.visualize_data_batch", "generated/urbanlc.downloader.base", "generated/urbanlc.downloader.base.BaseDownloader", "generated/urbanlc.downloader.base.BaseDownloader.download_image", "generated/urbanlc.downloader.base.BaseDownloader.download_images", "generated/urbanlc.downloader.base.BaseDownloader.get_spatial_filter", "generated/urbanlc.downloader.base.BaseDownloader.merge_patches", "generated/urbanlc.downloader.base.BaseDownloader.remove_cache", "generated/urbanlc.downloader.base.BaseDownloader.set_root", "generated/urbanlc.downloader.base.BoundingBox", "generated/urbanlc.downloader.base.BoundingBox.bounds", "generated/urbanlc.downloader.base.BoundingBox.from_bounds", "generated/urbanlc.downloader.base.BoundingBox.from_point", "generated/urbanlc.downloader.base.BoundingBox.get_partition", "generated/urbanlc.downloader.base.BoundingBox.region", "generated/urbanlc.downloader.esa2021_downloader", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_image", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_images", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.get_spatial_filter", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.initialize", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.merge_patches", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.remove_cache", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.set_root", "generated/urbanlc.downloader.landsat_downloader", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.apply_scale_factors", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.download_image", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.download_images", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.get_spatial_filter", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.initialize", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.mask_clouds", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.merge_patches", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.remove_cache", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.retrieve_image", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.set_root", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.apply_scale_factors", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_image", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_images", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.get_spatial_filter", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.initialize", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.mask_clouds", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.merge_patches", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.remove_cache", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.retrieve_image", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.set_root", "generated/urbanlc.downloader.landsat_downloader.LandsatTM", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.apply_scale_factors", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.download_image", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.download_images", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.get_spatial_filter", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.initialize", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.mask_clouds", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.merge_patches", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.remove_cache", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.retrieve_image", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.set_root", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.apply_scale_factors", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_image", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_images", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.get_spatial_filter", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.mask_clouds", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.merge_patches", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.remove_cache", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.retrieve_image", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.set_root", "generated/urbanlc.model.base", "generated/urbanlc.model.base.LCC", "generated/urbanlc.model.base.LCC.construct_transform_map", "generated/urbanlc.model.base.LCC.infer", "generated/urbanlc.model.base.LCC.load_model", "generated/urbanlc.model.base.LCC.save_model", "generated/urbanlc.model.base.LCC.train", "generated/urbanlc.model.base.LCC.validate", "generated/urbanlc.model.baseline", "generated/urbanlc.model.baseline.BaselineLCC", "generated/urbanlc.model.baseline.BaselineLCC.build_model", "generated/urbanlc.model.baseline.BaselineLCC.construct_transform_map", "generated/urbanlc.model.baseline.BaselineLCC.infer", "generated/urbanlc.model.baseline.BaselineLCC.load_model", "generated/urbanlc.model.baseline.BaselineLCC.retrieve_images", "generated/urbanlc.model.baseline.BaselineLCC.save_model", "generated/urbanlc.model.baseline.BaselineLCC.train", "generated/urbanlc.model.baseline.BaselineLCC.transform_pipeline", "generated/urbanlc.model.baseline.BaselineLCC.update_transform_map", "generated/urbanlc.model.baseline.BaselineLCC.validate", "generated/urbanlc.model.baseline.MSSBaseline", "generated/urbanlc.model.baseline.MSSBaseline.build_model", "generated/urbanlc.model.baseline.MSSBaseline.construct_transform_map", "generated/urbanlc.model.baseline.MSSBaseline.infer", "generated/urbanlc.model.baseline.MSSBaseline.load_model", "generated/urbanlc.model.baseline.MSSBaseline.retrieve_images", "generated/urbanlc.model.baseline.MSSBaseline.save_model", "generated/urbanlc.model.baseline.MSSBaseline.train", "generated/urbanlc.model.baseline.MSSBaseline.transform_pipeline", "generated/urbanlc.model.baseline.MSSBaseline.update_transform_map", "generated/urbanlc.model.baseline.MSSBaseline.validate", "generated/urbanlc.model.baseline.OLI_TIRSBaseline", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.build_model", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.construct_transform_map", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.infer", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.load_model", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.retrieve_images", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.save_model", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.train", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.transform_pipeline", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.update_transform_map", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.validate", "generated/urbanlc.model.baseline.TMBaseline", "generated/urbanlc.model.baseline.TMBaseline.build_model", "generated/urbanlc.model.baseline.TMBaseline.construct_transform_map", "generated/urbanlc.model.baseline.TMBaseline.infer", "generated/urbanlc.model.baseline.TMBaseline.load_model", "generated/urbanlc.model.baseline.TMBaseline.retrieve_images", "generated/urbanlc.model.baseline.TMBaseline.save_model", "generated/urbanlc.model.baseline.TMBaseline.train", "generated/urbanlc.model.baseline.TMBaseline.transform_pipeline", "generated/urbanlc.model.baseline.TMBaseline.update_transform_map", "generated/urbanlc.model.baseline.TMBaseline.validate", "generated/urbanlc.model.dataloader", "generated/urbanlc.model.dataloader.CustomRasterDataset", "generated/urbanlc.model.dataloader.CustomRasterDataset.all_bands", "generated/urbanlc.model.dataloader.CustomRasterDataset.bounds", "generated/urbanlc.model.dataloader.CustomRasterDataset.cmap", "generated/urbanlc.model.dataloader.CustomRasterDataset.crs", "generated/urbanlc.model.dataloader.CustomRasterDataset.date_format", "generated/urbanlc.model.dataloader.CustomRasterDataset.filename_glob", "generated/urbanlc.model.dataloader.CustomRasterDataset.filename_regex", "generated/urbanlc.model.dataloader.CustomRasterDataset.is_image", "generated/urbanlc.model.dataloader.CustomRasterDataset.rgb_bands", "generated/urbanlc.model.dataloader.CustomRasterDataset.separate_files", "generated/urbanlc.model.dataloader.ESA2021", "generated/urbanlc.model.dataloader.ESA2021.all_bands", "generated/urbanlc.model.dataloader.ESA2021.bounds", "generated/urbanlc.model.dataloader.ESA2021.cmap", "generated/urbanlc.model.dataloader.ESA2021.crs", "generated/urbanlc.model.dataloader.ESA2021.date_format", "generated/urbanlc.model.dataloader.ESA2021.filename_glob", "generated/urbanlc.model.dataloader.ESA2021.filename_regex", "generated/urbanlc.model.dataloader.ESA2021.is_image", "generated/urbanlc.model.dataloader.ESA2021.rgb_bands", "generated/urbanlc.model.dataloader.ESA2021.separate_files", "generated/urbanlc.model.dataloader.Landsat", "generated/urbanlc.model.dataloader.Landsat.MSS", "generated/urbanlc.model.dataloader.Landsat.OLITIRS", "generated/urbanlc.model.dataloader.Landsat.TM", "generated/urbanlc.model.dataloader.Landsat.all_bands", "generated/urbanlc.model.dataloader.Landsat.bounds", "generated/urbanlc.model.dataloader.Landsat.cmap", "generated/urbanlc.model.dataloader.Landsat.crs", "generated/urbanlc.model.dataloader.Landsat.date_format", "generated/urbanlc.model.dataloader.Landsat.filename_glob", "generated/urbanlc.model.dataloader.Landsat.filename_regex", "generated/urbanlc.model.dataloader.Landsat.is_image", "generated/urbanlc.model.dataloader.Landsat.rgb_bands", "generated/urbanlc.model.dataloader.Landsat.separate_files", "generated/urbanlc.model.dataloader.get_dataloader", "generated/urbanlc.model.dataloader.parse_paths", "generated/urbanlc.model.deep_learning", "generated/urbanlc.model.deep_learning.DeepLearningLCC", "generated/urbanlc.model.deep_learning.DeepLearningLCC.build_model", "generated/urbanlc.model.deep_learning.DeepLearningLCC.construct_transform_map", "generated/urbanlc.model.deep_learning.DeepLearningLCC.denormalize_class", "generated/urbanlc.model.deep_learning.DeepLearningLCC.get_metrics", "generated/urbanlc.model.deep_learning.DeepLearningLCC.infer", "generated/urbanlc.model.deep_learning.DeepLearningLCC.load_model", "generated/urbanlc.model.deep_learning.DeepLearningLCC.normalize_class", "generated/urbanlc.model.deep_learning.DeepLearningLCC.save_model", "generated/urbanlc.model.deep_learning.DeepLearningLCC.set_device", "generated/urbanlc.model.deep_learning.DeepLearningLCC.setup_trainer", "generated/urbanlc.model.deep_learning.DeepLearningLCC.to", "generated/urbanlc.model.deep_learning.DeepLearningLCC.train", "generated/urbanlc.model.deep_learning.DeepLearningLCC.train_one_epoch", "generated/urbanlc.model.deep_learning.DeepLearningLCC.validate", "generated/urbanlc.model.deep_learning.MSSDeepLearning", "generated/urbanlc.model.deep_learning.MSSDeepLearning.build_model", "generated/urbanlc.model.deep_learning.MSSDeepLearning.construct_transform_map", "generated/urbanlc.model.deep_learning.MSSDeepLearning.denormalize_class", "generated/urbanlc.model.deep_learning.MSSDeepLearning.get_metrics", "generated/urbanlc.model.deep_learning.MSSDeepLearning.infer", "generated/urbanlc.model.deep_learning.MSSDeepLearning.load_model", "generated/urbanlc.model.deep_learning.MSSDeepLearning.normalize_class", "generated/urbanlc.model.deep_learning.MSSDeepLearning.save_model", "generated/urbanlc.model.deep_learning.MSSDeepLearning.set_device", "generated/urbanlc.model.deep_learning.MSSDeepLearning.setup_trainer", "generated/urbanlc.model.deep_learning.MSSDeepLearning.to", "generated/urbanlc.model.deep_learning.MSSDeepLearning.train", "generated/urbanlc.model.deep_learning.MSSDeepLearning.train_one_epoch", "generated/urbanlc.model.deep_learning.MSSDeepLearning.validate", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.build_model", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.construct_transform_map", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.denormalize_class", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.get_metrics", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.infer", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.load_model", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.normalize_class", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.save_model", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.set_device", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.setup_trainer", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.to", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.train", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.train_one_epoch", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.validate", "generated/urbanlc.model.deep_learning.TMDeepLearning", "generated/urbanlc.model.deep_learning.TMDeepLearning.build_model", "generated/urbanlc.model.deep_learning.TMDeepLearning.construct_transform_map", "generated/urbanlc.model.deep_learning.TMDeepLearning.denormalize_class", "generated/urbanlc.model.deep_learning.TMDeepLearning.get_metrics", "generated/urbanlc.model.deep_learning.TMDeepLearning.infer", "generated/urbanlc.model.deep_learning.TMDeepLearning.load_model", "generated/urbanlc.model.deep_learning.TMDeepLearning.normalize_class", "generated/urbanlc.model.deep_learning.TMDeepLearning.save_model", "generated/urbanlc.model.deep_learning.TMDeepLearning.set_device", "generated/urbanlc.model.deep_learning.TMDeepLearning.setup_trainer", "generated/urbanlc.model.deep_learning.TMDeepLearning.to", "generated/urbanlc.model.deep_learning.TMDeepLearning.train", "generated/urbanlc.model.deep_learning.TMDeepLearning.train_one_epoch", "generated/urbanlc.model.deep_learning.TMDeepLearning.validate", "generated/urbanlc.model.download", "generated/urbanlc.model.download.download_model", "generated/urbanlc.model.pipeline_transforms", "generated/urbanlc.model.pipeline_transforms.AppendBUI", "generated/urbanlc.model.pipeline_transforms.AppendBUI.T_destination", "generated/urbanlc.model.pipeline_transforms.AppendBUI.add_module", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_func", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_box", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_boxes", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_class", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_keypoint", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_mask", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_box", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_boxes", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_class", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_keypoint", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_mask", "generated/urbanlc.model.pipeline_transforms.AppendBUI.bfloat16", "generated/urbanlc.model.pipeline_transforms.AppendBUI.buffers", "generated/urbanlc.model.pipeline_transforms.AppendBUI.children", "generated/urbanlc.model.pipeline_transforms.AppendBUI.compute_transformation", "generated/urbanlc.model.pipeline_transforms.AppendBUI.cpu", "generated/urbanlc.model.pipeline_transforms.AppendBUI.cuda", "generated/urbanlc.model.pipeline_transforms.AppendBUI.double", "generated/urbanlc.model.pipeline_transforms.AppendBUI.dump_patches", "generated/urbanlc.model.pipeline_transforms.AppendBUI.eval", "generated/urbanlc.model.pipeline_transforms.AppendBUI.extra_repr", "generated/urbanlc.model.pipeline_transforms.AppendBUI.float", "generated/urbanlc.model.pipeline_transforms.AppendBUI.forward", "generated/urbanlc.model.pipeline_transforms.AppendBUI.forward_parameters", "generated/urbanlc.model.pipeline_transforms.AppendBUI.generate_parameters", "generated/urbanlc.model.pipeline_transforms.AppendBUI.generate_transformation_matrix", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_buffer", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_extra_state", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_parameter", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_submodule", "generated/urbanlc.model.pipeline_transforms.AppendBUI.half", "generated/urbanlc.model.pipeline_transforms.AppendBUI.identity_matrix", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_boxes", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_classes", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_inputs", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_keypoints", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_masks", "generated/urbanlc.model.pipeline_transforms.AppendBUI.ipu", "generated/urbanlc.model.pipeline_transforms.AppendBUI.load_state_dict", "generated/urbanlc.model.pipeline_transforms.AppendBUI.modules", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_buffers", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_children", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_modules", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_parameters", "generated/urbanlc.model.pipeline_transforms.AppendBUI.parameters", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_backward_hook", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_buffer", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_forward_hook", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_forward_pre_hook", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_full_backward_hook", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_load_state_dict_post_hook", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_module", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_parameter", "generated/urbanlc.model.pipeline_transforms.AppendBUI.requires_grad_", "generated/urbanlc.model.pipeline_transforms.AppendBUI.set_extra_state", "generated/urbanlc.model.pipeline_transforms.AppendBUI.set_rng_device_and_dtype", "generated/urbanlc.model.pipeline_transforms.AppendBUI.share_memory", "generated/urbanlc.model.pipeline_transforms.AppendBUI.state_dict", "generated/urbanlc.model.pipeline_transforms.AppendBUI.to", "generated/urbanlc.model.pipeline_transforms.AppendBUI.to_empty", "generated/urbanlc.model.pipeline_transforms.AppendBUI.train", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_boxes", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_classes", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_inputs", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_keypoints", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_masks", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_matrix", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_output_tensor", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_tensor", "generated/urbanlc.model.pipeline_transforms.AppendBUI.type", "generated/urbanlc.model.pipeline_transforms.AppendBUI.validate_tensor", "generated/urbanlc.model.pipeline_transforms.AppendBUI.xpu", "generated/urbanlc.model.pipeline_transforms.AppendBUI.zero_grad", "generated/urbanlc.model.pipeline_transforms.LandsatTransformer", "generated/urbanlc.model.pipeline_transforms.LandsatTransformer.calculate_statistics", "generated/urbanlc.model.pipeline_transforms.LandsatTransformer.transform", "generated/urbanlc.model.pipeline_transforms.MSSTransformer", "generated/urbanlc.model.pipeline_transforms.MSSTransformer.calculate_statistics", "generated/urbanlc.model.pipeline_transforms.MSSTransformer.transform", "generated/urbanlc.model.pipeline_transforms.OLITIRSTransformer", "generated/urbanlc.model.pipeline_transforms.OLITIRSTransformer.calculate_statistics", "generated/urbanlc.model.pipeline_transforms.OLITIRSTransformer.transform", "generated/urbanlc.model.pipeline_transforms.TMTransformer", "generated/urbanlc.model.pipeline_transforms.TMTransformer.calculate_statistics", "generated/urbanlc.model.pipeline_transforms.TMTransformer.transform", "generated/urbanlc.model.pipeline_transforms.compute_BUI", "generated/urbanlc.model.pipeline_transforms.compute_NDBI", "generated/urbanlc.model.pipeline_transforms.compute_NDVI", "generated/urbanlc.model.pipeline_transforms.compute_NDWI", "generated/urbanlc.model.pipeline_transforms.mix_patch", "generated/urbanlc.model.pipeline_transforms.rand_bbox", "generated/urbanlc.model.train_utils", "generated/urbanlc.model.train_utils.combine_prediction", "generated/urbanlc.model.train_utils.load_checkpoint", "generated/urbanlc.model.train_utils.save_checkpoint", "generated/urbanlc.model.train_utils.segment_satelite_image", "generated/urbanlc.model.train_utils.set_seed", "generated/urbanlc.utils", "generated/urbanlc.utils.export_geotiff", "generated/urbanlc.utils.open_at_scale", "generated/urbanlc.utils.open_at_size", "index", "quickstart", "usage"], "filenames": ["_autosummary/urbanlc.rst", "_autosummary/urbanlc.analyze.rst", "_autosummary/urbanlc.analyze.constant.rst", "_autosummary/urbanlc.analyze.evaluate.rst", "_autosummary/urbanlc.analyze.metrics.rst", "_autosummary/urbanlc.analyze.visualizer.rst", "_autosummary/urbanlc.downloader.rst", "_autosummary/urbanlc.downloader.base.rst", "_autosummary/urbanlc.downloader.downloader_constant.rst", "_autosummary/urbanlc.downloader.esa2021_downloader.rst", "_autosummary/urbanlc.downloader.general.rst", "_autosummary/urbanlc.downloader.landsat_downloader.rst", "_autosummary/urbanlc.downloader.logger.rst", "_autosummary/urbanlc.model.rst", "_autosummary/urbanlc.model.base.rst", "_autosummary/urbanlc.model.baseline.rst", "_autosummary/urbanlc.model.dataloader.rst", "_autosummary/urbanlc.model.deep_learning.rst", "_autosummary/urbanlc.model.download.rst", "_autosummary/urbanlc.model.pipeline_transforms.rst", "_autosummary/urbanlc.model.train_utils.rst", "_autosummary/urbanlc.utils.rst", "api.rst", "generated/urbanlc.analyze.metrics.rst", "generated/urbanlc.analyze.metrics.accuracy.rst", "generated/urbanlc.analyze.metrics.cohen_kappa.rst", "generated/urbanlc.analyze.metrics.confusion_matrix.rst", "generated/urbanlc.analyze.metrics.get_class_distribution.rst", "generated/urbanlc.analyze.metrics.producer_accuracy.rst", "generated/urbanlc.analyze.metrics.user_accuracy.rst", "generated/urbanlc.analyze.visualizer.rst", "generated/urbanlc.analyze.visualizer.get_esa_colormap.rst", "generated/urbanlc.analyze.visualizer.plot_change.rst", "generated/urbanlc.analyze.visualizer.plot_class_distribution.rst", "generated/urbanlc.analyze.visualizer.plot_land_cover.rst", "generated/urbanlc.analyze.visualizer.plot_landsat.rst", "generated/urbanlc.analyze.visualizer.show_esa_label.rst", "generated/urbanlc.analyze.visualizer.visualize_data_batch.rst", "generated/urbanlc.downloader.base.rst", "generated/urbanlc.downloader.base.BaseDownloader.rst", "generated/urbanlc.downloader.base.BaseDownloader.download_image.rst", "generated/urbanlc.downloader.base.BaseDownloader.download_images.rst", "generated/urbanlc.downloader.base.BaseDownloader.get_spatial_filter.rst", "generated/urbanlc.downloader.base.BaseDownloader.merge_patches.rst", "generated/urbanlc.downloader.base.BaseDownloader.remove_cache.rst", "generated/urbanlc.downloader.base.BaseDownloader.set_root.rst", "generated/urbanlc.downloader.base.BoundingBox.rst", "generated/urbanlc.downloader.base.BoundingBox.bounds.rst", "generated/urbanlc.downloader.base.BoundingBox.from_bounds.rst", "generated/urbanlc.downloader.base.BoundingBox.from_point.rst", "generated/urbanlc.downloader.base.BoundingBox.get_partition.rst", "generated/urbanlc.downloader.base.BoundingBox.region.rst", "generated/urbanlc.downloader.esa2021_downloader.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_image.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_images.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.get_spatial_filter.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.initialize.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.merge_patches.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.remove_cache.rst", "generated/urbanlc.downloader.esa2021_downloader.ESAWorldCover.set_root.rst", "generated/urbanlc.downloader.landsat_downloader.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.apply_scale_factors.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.download_image.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.download_images.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.get_spatial_filter.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.initialize.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.mask_clouds.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.merge_patches.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.remove_cache.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.retrieve_image.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatMSS.set_root.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.apply_scale_factors.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_image.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_images.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.get_spatial_filter.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.initialize.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.mask_clouds.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.merge_patches.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.remove_cache.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.retrieve_image.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatOLITIRS.set_root.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.apply_scale_factors.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.download_image.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.download_images.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.get_spatial_filter.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.initialize.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.mask_clouds.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.merge_patches.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.remove_cache.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.retrieve_image.rst", "generated/urbanlc.downloader.landsat_downloader.LandsatTM.set_root.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.apply_scale_factors.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_image.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_images.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.get_spatial_filter.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.mask_clouds.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.merge_patches.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.remove_cache.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.retrieve_image.rst", "generated/urbanlc.downloader.landsat_downloader.Landsat_Collection2.set_root.rst", "generated/urbanlc.model.base.rst", "generated/urbanlc.model.base.LCC.rst", "generated/urbanlc.model.base.LCC.construct_transform_map.rst", "generated/urbanlc.model.base.LCC.infer.rst", "generated/urbanlc.model.base.LCC.load_model.rst", "generated/urbanlc.model.base.LCC.save_model.rst", "generated/urbanlc.model.base.LCC.train.rst", "generated/urbanlc.model.base.LCC.validate.rst", "generated/urbanlc.model.baseline.rst", "generated/urbanlc.model.baseline.BaselineLCC.rst", "generated/urbanlc.model.baseline.BaselineLCC.build_model.rst", "generated/urbanlc.model.baseline.BaselineLCC.construct_transform_map.rst", "generated/urbanlc.model.baseline.BaselineLCC.infer.rst", "generated/urbanlc.model.baseline.BaselineLCC.load_model.rst", "generated/urbanlc.model.baseline.BaselineLCC.retrieve_images.rst", "generated/urbanlc.model.baseline.BaselineLCC.save_model.rst", "generated/urbanlc.model.baseline.BaselineLCC.train.rst", "generated/urbanlc.model.baseline.BaselineLCC.transform_pipeline.rst", "generated/urbanlc.model.baseline.BaselineLCC.update_transform_map.rst", "generated/urbanlc.model.baseline.BaselineLCC.validate.rst", "generated/urbanlc.model.baseline.MSSBaseline.rst", "generated/urbanlc.model.baseline.MSSBaseline.build_model.rst", "generated/urbanlc.model.baseline.MSSBaseline.construct_transform_map.rst", "generated/urbanlc.model.baseline.MSSBaseline.infer.rst", "generated/urbanlc.model.baseline.MSSBaseline.load_model.rst", "generated/urbanlc.model.baseline.MSSBaseline.retrieve_images.rst", "generated/urbanlc.model.baseline.MSSBaseline.save_model.rst", "generated/urbanlc.model.baseline.MSSBaseline.train.rst", "generated/urbanlc.model.baseline.MSSBaseline.transform_pipeline.rst", "generated/urbanlc.model.baseline.MSSBaseline.update_transform_map.rst", "generated/urbanlc.model.baseline.MSSBaseline.validate.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.build_model.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.construct_transform_map.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.infer.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.load_model.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.retrieve_images.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.save_model.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.train.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.transform_pipeline.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.update_transform_map.rst", "generated/urbanlc.model.baseline.OLI_TIRSBaseline.validate.rst", "generated/urbanlc.model.baseline.TMBaseline.rst", "generated/urbanlc.model.baseline.TMBaseline.build_model.rst", "generated/urbanlc.model.baseline.TMBaseline.construct_transform_map.rst", "generated/urbanlc.model.baseline.TMBaseline.infer.rst", "generated/urbanlc.model.baseline.TMBaseline.load_model.rst", "generated/urbanlc.model.baseline.TMBaseline.retrieve_images.rst", "generated/urbanlc.model.baseline.TMBaseline.save_model.rst", "generated/urbanlc.model.baseline.TMBaseline.train.rst", "generated/urbanlc.model.baseline.TMBaseline.transform_pipeline.rst", "generated/urbanlc.model.baseline.TMBaseline.update_transform_map.rst", "generated/urbanlc.model.baseline.TMBaseline.validate.rst", "generated/urbanlc.model.dataloader.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.all_bands.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.bounds.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.cmap.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.crs.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.date_format.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.filename_glob.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.filename_regex.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.is_image.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.rgb_bands.rst", "generated/urbanlc.model.dataloader.CustomRasterDataset.separate_files.rst", "generated/urbanlc.model.dataloader.ESA2021.rst", "generated/urbanlc.model.dataloader.ESA2021.all_bands.rst", "generated/urbanlc.model.dataloader.ESA2021.bounds.rst", "generated/urbanlc.model.dataloader.ESA2021.cmap.rst", "generated/urbanlc.model.dataloader.ESA2021.crs.rst", "generated/urbanlc.model.dataloader.ESA2021.date_format.rst", "generated/urbanlc.model.dataloader.ESA2021.filename_glob.rst", "generated/urbanlc.model.dataloader.ESA2021.filename_regex.rst", "generated/urbanlc.model.dataloader.ESA2021.is_image.rst", "generated/urbanlc.model.dataloader.ESA2021.rgb_bands.rst", "generated/urbanlc.model.dataloader.ESA2021.separate_files.rst", "generated/urbanlc.model.dataloader.Landsat.rst", "generated/urbanlc.model.dataloader.Landsat.MSS.rst", "generated/urbanlc.model.dataloader.Landsat.OLITIRS.rst", "generated/urbanlc.model.dataloader.Landsat.TM.rst", "generated/urbanlc.model.dataloader.Landsat.all_bands.rst", "generated/urbanlc.model.dataloader.Landsat.bounds.rst", "generated/urbanlc.model.dataloader.Landsat.cmap.rst", "generated/urbanlc.model.dataloader.Landsat.crs.rst", "generated/urbanlc.model.dataloader.Landsat.date_format.rst", "generated/urbanlc.model.dataloader.Landsat.filename_glob.rst", "generated/urbanlc.model.dataloader.Landsat.filename_regex.rst", "generated/urbanlc.model.dataloader.Landsat.is_image.rst", "generated/urbanlc.model.dataloader.Landsat.rgb_bands.rst", "generated/urbanlc.model.dataloader.Landsat.separate_files.rst", "generated/urbanlc.model.dataloader.get_dataloader.rst", "generated/urbanlc.model.dataloader.parse_paths.rst", "generated/urbanlc.model.deep_learning.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.build_model.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.construct_transform_map.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.denormalize_class.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.get_metrics.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.infer.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.load_model.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.normalize_class.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.save_model.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.set_device.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.setup_trainer.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.to.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.train.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.train_one_epoch.rst", "generated/urbanlc.model.deep_learning.DeepLearningLCC.validate.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.build_model.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.construct_transform_map.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.denormalize_class.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.get_metrics.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.infer.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.load_model.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.normalize_class.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.save_model.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.set_device.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.setup_trainer.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.to.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.train.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.train_one_epoch.rst", "generated/urbanlc.model.deep_learning.MSSDeepLearning.validate.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.build_model.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.construct_transform_map.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.denormalize_class.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.get_metrics.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.infer.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.load_model.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.normalize_class.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.save_model.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.set_device.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.setup_trainer.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.to.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.train.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.train_one_epoch.rst", "generated/urbanlc.model.deep_learning.OLITIRSDeepLearning.validate.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.build_model.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.construct_transform_map.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.denormalize_class.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.get_metrics.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.infer.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.load_model.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.normalize_class.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.save_model.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.set_device.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.setup_trainer.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.to.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.train.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.train_one_epoch.rst", "generated/urbanlc.model.deep_learning.TMDeepLearning.validate.rst", "generated/urbanlc.model.download.rst", "generated/urbanlc.model.download.download_model.rst", "generated/urbanlc.model.pipeline_transforms.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.T_destination.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.add_module.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_func.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_box.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_boxes.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_class.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_keypoint.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_mask.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_box.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_boxes.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_class.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_keypoint.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_mask.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.bfloat16.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.buffers.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.children.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.compute_transformation.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.cpu.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.cuda.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.double.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.dump_patches.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.eval.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.extra_repr.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.float.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.forward.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.forward_parameters.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.generate_parameters.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.generate_transformation_matrix.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_buffer.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_extra_state.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_parameter.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.get_submodule.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.half.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.identity_matrix.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_boxes.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_classes.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_inputs.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_keypoints.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.inverse_masks.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.ipu.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.load_state_dict.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.modules.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_buffers.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_children.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_modules.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.named_parameters.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.parameters.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_backward_hook.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_buffer.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_forward_hook.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_forward_pre_hook.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_full_backward_hook.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_load_state_dict_post_hook.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_module.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.register_parameter.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.requires_grad_.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.set_extra_state.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.set_rng_device_and_dtype.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.share_memory.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.state_dict.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.to.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.to_empty.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.train.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_boxes.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_classes.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_inputs.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_keypoints.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_masks.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_matrix.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_output_tensor.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.transform_tensor.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.type.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.validate_tensor.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.xpu.rst", "generated/urbanlc.model.pipeline_transforms.AppendBUI.zero_grad.rst", "generated/urbanlc.model.pipeline_transforms.LandsatTransformer.rst", "generated/urbanlc.model.pipeline_transforms.LandsatTransformer.calculate_statistics.rst", "generated/urbanlc.model.pipeline_transforms.LandsatTransformer.transform.rst", "generated/urbanlc.model.pipeline_transforms.MSSTransformer.rst", "generated/urbanlc.model.pipeline_transforms.MSSTransformer.calculate_statistics.rst", "generated/urbanlc.model.pipeline_transforms.MSSTransformer.transform.rst", "generated/urbanlc.model.pipeline_transforms.OLITIRSTransformer.rst", "generated/urbanlc.model.pipeline_transforms.OLITIRSTransformer.calculate_statistics.rst", "generated/urbanlc.model.pipeline_transforms.OLITIRSTransformer.transform.rst", "generated/urbanlc.model.pipeline_transforms.TMTransformer.rst", "generated/urbanlc.model.pipeline_transforms.TMTransformer.calculate_statistics.rst", "generated/urbanlc.model.pipeline_transforms.TMTransformer.transform.rst", "generated/urbanlc.model.pipeline_transforms.compute_BUI.rst", "generated/urbanlc.model.pipeline_transforms.compute_NDBI.rst", "generated/urbanlc.model.pipeline_transforms.compute_NDVI.rst", "generated/urbanlc.model.pipeline_transforms.compute_NDWI.rst", "generated/urbanlc.model.pipeline_transforms.mix_patch.rst", "generated/urbanlc.model.pipeline_transforms.rand_bbox.rst", "generated/urbanlc.model.train_utils.rst", "generated/urbanlc.model.train_utils.combine_prediction.rst", "generated/urbanlc.model.train_utils.load_checkpoint.rst", "generated/urbanlc.model.train_utils.save_checkpoint.rst", "generated/urbanlc.model.train_utils.segment_satelite_image.rst", "generated/urbanlc.model.train_utils.set_seed.rst", "generated/urbanlc.utils.rst", "generated/urbanlc.utils.export_geotiff.rst", "generated/urbanlc.utils.open_at_scale.rst", "generated/urbanlc.utils.open_at_size.rst", "index.rst", "quickstart.rst", "usage.rst"], "titles": ["urbanlc", "urbanlc.analyze", "urbanlc.analyze.constant", "urbanlc.analyze.evaluate", "urbanlc.analyze.metrics", "urbanlc.analyze.visualizer", "urbanlc.downloader", "urbanlc.downloader.base", "urbanlc.downloader.downloader_constant", "urbanlc.downloader.esa2021_downloader", "urbanlc.downloader.general", "urbanlc.downloader.landsat_downloader", "urbanlc.downloader.logger", "urbanlc.model", "urbanlc.model.base", "urbanlc.model.baseline", "urbanlc.model.dataloader", "urbanlc.model.deep_learning", "urbanlc.model.download", "urbanlc.model.pipeline_transforms", "urbanlc.model.train_utils", "urbanlc.utils", "&lt;no title&gt;", "urbanlc.analyze.metrics", "urbanlc.analyze.metrics.accuracy", "urbanlc.analyze.metrics.cohen_kappa", "urbanlc.analyze.metrics.confusion_matrix", "urbanlc.analyze.metrics.get_class_distribution", "urbanlc.analyze.metrics.producer_accuracy", "urbanlc.analyze.metrics.user_accuracy", "urbanlc.analyze.visualizer", "urbanlc.analyze.visualizer.get_esa_colormap", "urbanlc.analyze.visualizer.plot_change", "urbanlc.analyze.visualizer.plot_class_distribution", "urbanlc.analyze.visualizer.plot_land_cover", "urbanlc.analyze.visualizer.plot_landsat", "urbanlc.analyze.visualizer.show_esa_label", "urbanlc.analyze.visualizer.visualize_data_batch", "urbanlc.downloader.base", "urbanlc.downloader.base.BaseDownloader", "urbanlc.downloader.base.BaseDownloader.download_image", "urbanlc.downloader.base.BaseDownloader.download_images", "urbanlc.downloader.base.BaseDownloader.get_spatial_filter", "urbanlc.downloader.base.BaseDownloader.merge_patches", "urbanlc.downloader.base.BaseDownloader.remove_cache", "urbanlc.downloader.base.BaseDownloader.set_root", "urbanlc.downloader.base.BoundingBox", "urbanlc.downloader.base.BoundingBox.bounds", "urbanlc.downloader.base.BoundingBox.from_bounds", "urbanlc.downloader.base.BoundingBox.from_point", "urbanlc.downloader.base.BoundingBox.get_partition", "urbanlc.downloader.base.BoundingBox.region", "urbanlc.downloader.esa2021_downloader", "urbanlc.downloader.esa2021_downloader.ESAWorldCover", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_image", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_images", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.get_spatial_filter", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.initialize", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.merge_patches", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.remove_cache", "urbanlc.downloader.esa2021_downloader.ESAWorldCover.set_root", "urbanlc.downloader.landsat_downloader", "urbanlc.downloader.landsat_downloader.LandsatMSS", "urbanlc.downloader.landsat_downloader.LandsatMSS.apply_scale_factors", "urbanlc.downloader.landsat_downloader.LandsatMSS.download_image", "urbanlc.downloader.landsat_downloader.LandsatMSS.download_images", "urbanlc.downloader.landsat_downloader.LandsatMSS.get_spatial_filter", "urbanlc.downloader.landsat_downloader.LandsatMSS.initialize", "urbanlc.downloader.landsat_downloader.LandsatMSS.mask_clouds", "urbanlc.downloader.landsat_downloader.LandsatMSS.merge_patches", "urbanlc.downloader.landsat_downloader.LandsatMSS.remove_cache", "urbanlc.downloader.landsat_downloader.LandsatMSS.retrieve_image", "urbanlc.downloader.landsat_downloader.LandsatMSS.set_root", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.apply_scale_factors", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_image", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_images", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.get_spatial_filter", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.initialize", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.mask_clouds", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.merge_patches", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.remove_cache", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.retrieve_image", "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.set_root", "urbanlc.downloader.landsat_downloader.LandsatTM", "urbanlc.downloader.landsat_downloader.LandsatTM.apply_scale_factors", "urbanlc.downloader.landsat_downloader.LandsatTM.download_image", "urbanlc.downloader.landsat_downloader.LandsatTM.download_images", "urbanlc.downloader.landsat_downloader.LandsatTM.get_spatial_filter", "urbanlc.downloader.landsat_downloader.LandsatTM.initialize", "urbanlc.downloader.landsat_downloader.LandsatTM.mask_clouds", "urbanlc.downloader.landsat_downloader.LandsatTM.merge_patches", "urbanlc.downloader.landsat_downloader.LandsatTM.remove_cache", "urbanlc.downloader.landsat_downloader.LandsatTM.retrieve_image", "urbanlc.downloader.landsat_downloader.LandsatTM.set_root", "urbanlc.downloader.landsat_downloader.Landsat_Collection2", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.apply_scale_factors", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_image", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_images", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.get_spatial_filter", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.mask_clouds", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.merge_patches", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.remove_cache", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.retrieve_image", "urbanlc.downloader.landsat_downloader.Landsat_Collection2.set_root", "urbanlc.model.base", "urbanlc.model.base.LCC", "urbanlc.model.base.LCC.construct_transform_map", "urbanlc.model.base.LCC.infer", "urbanlc.model.base.LCC.load_model", "urbanlc.model.base.LCC.save_model", "urbanlc.model.base.LCC.train", "urbanlc.model.base.LCC.validate", "urbanlc.model.baseline", "urbanlc.model.baseline.BaselineLCC", "urbanlc.model.baseline.BaselineLCC.build_model", "urbanlc.model.baseline.BaselineLCC.construct_transform_map", "urbanlc.model.baseline.BaselineLCC.infer", "urbanlc.model.baseline.BaselineLCC.load_model", "urbanlc.model.baseline.BaselineLCC.retrieve_images", "urbanlc.model.baseline.BaselineLCC.save_model", "urbanlc.model.baseline.BaselineLCC.train", "urbanlc.model.baseline.BaselineLCC.transform_pipeline", "urbanlc.model.baseline.BaselineLCC.update_transform_map", "urbanlc.model.baseline.BaselineLCC.validate", "urbanlc.model.baseline.MSSBaseline", "urbanlc.model.baseline.MSSBaseline.build_model", "urbanlc.model.baseline.MSSBaseline.construct_transform_map", "urbanlc.model.baseline.MSSBaseline.infer", "urbanlc.model.baseline.MSSBaseline.load_model", "urbanlc.model.baseline.MSSBaseline.retrieve_images", "urbanlc.model.baseline.MSSBaseline.save_model", "urbanlc.model.baseline.MSSBaseline.train", "urbanlc.model.baseline.MSSBaseline.transform_pipeline", "urbanlc.model.baseline.MSSBaseline.update_transform_map", "urbanlc.model.baseline.MSSBaseline.validate", "urbanlc.model.baseline.OLI_TIRSBaseline", "urbanlc.model.baseline.OLI_TIRSBaseline.build_model", "urbanlc.model.baseline.OLI_TIRSBaseline.construct_transform_map", "urbanlc.model.baseline.OLI_TIRSBaseline.infer", "urbanlc.model.baseline.OLI_TIRSBaseline.load_model", "urbanlc.model.baseline.OLI_TIRSBaseline.retrieve_images", "urbanlc.model.baseline.OLI_TIRSBaseline.save_model", "urbanlc.model.baseline.OLI_TIRSBaseline.train", "urbanlc.model.baseline.OLI_TIRSBaseline.transform_pipeline", "urbanlc.model.baseline.OLI_TIRSBaseline.update_transform_map", "urbanlc.model.baseline.OLI_TIRSBaseline.validate", "urbanlc.model.baseline.TMBaseline", "urbanlc.model.baseline.TMBaseline.build_model", "urbanlc.model.baseline.TMBaseline.construct_transform_map", "urbanlc.model.baseline.TMBaseline.infer", "urbanlc.model.baseline.TMBaseline.load_model", "urbanlc.model.baseline.TMBaseline.retrieve_images", "urbanlc.model.baseline.TMBaseline.save_model", "urbanlc.model.baseline.TMBaseline.train", "urbanlc.model.baseline.TMBaseline.transform_pipeline", "urbanlc.model.baseline.TMBaseline.update_transform_map", "urbanlc.model.baseline.TMBaseline.validate", "urbanlc.model.dataloader", "urbanlc.model.dataloader.CustomRasterDataset", "urbanlc.model.dataloader.CustomRasterDataset.all_bands", "urbanlc.model.dataloader.CustomRasterDataset.bounds", "urbanlc.model.dataloader.CustomRasterDataset.cmap", "urbanlc.model.dataloader.CustomRasterDataset.crs", "urbanlc.model.dataloader.CustomRasterDataset.date_format", "urbanlc.model.dataloader.CustomRasterDataset.filename_glob", "urbanlc.model.dataloader.CustomRasterDataset.filename_regex", "urbanlc.model.dataloader.CustomRasterDataset.is_image", "urbanlc.model.dataloader.CustomRasterDataset.rgb_bands", "urbanlc.model.dataloader.CustomRasterDataset.separate_files", "urbanlc.model.dataloader.ESA2021", "urbanlc.model.dataloader.ESA2021.all_bands", "urbanlc.model.dataloader.ESA2021.bounds", "urbanlc.model.dataloader.ESA2021.cmap", "urbanlc.model.dataloader.ESA2021.crs", "urbanlc.model.dataloader.ESA2021.date_format", "urbanlc.model.dataloader.ESA2021.filename_glob", "urbanlc.model.dataloader.ESA2021.filename_regex", "urbanlc.model.dataloader.ESA2021.is_image", "urbanlc.model.dataloader.ESA2021.rgb_bands", "urbanlc.model.dataloader.ESA2021.separate_files", "urbanlc.model.dataloader.Landsat", "urbanlc.model.dataloader.Landsat.MSS", "urbanlc.model.dataloader.Landsat.OLITIRS", "urbanlc.model.dataloader.Landsat.TM", "urbanlc.model.dataloader.Landsat.all_bands", "urbanlc.model.dataloader.Landsat.bounds", "urbanlc.model.dataloader.Landsat.cmap", "urbanlc.model.dataloader.Landsat.crs", "urbanlc.model.dataloader.Landsat.date_format", "urbanlc.model.dataloader.Landsat.filename_glob", "urbanlc.model.dataloader.Landsat.filename_regex", "urbanlc.model.dataloader.Landsat.is_image", "urbanlc.model.dataloader.Landsat.rgb_bands", "urbanlc.model.dataloader.Landsat.separate_files", "urbanlc.model.dataloader.get_dataloader", "urbanlc.model.dataloader.parse_paths", "urbanlc.model.deep_learning", "urbanlc.model.deep_learning.DeepLearningLCC", "urbanlc.model.deep_learning.DeepLearningLCC.build_model", "urbanlc.model.deep_learning.DeepLearningLCC.construct_transform_map", "urbanlc.model.deep_learning.DeepLearningLCC.denormalize_class", "urbanlc.model.deep_learning.DeepLearningLCC.get_metrics", "urbanlc.model.deep_learning.DeepLearningLCC.infer", "urbanlc.model.deep_learning.DeepLearningLCC.load_model", "urbanlc.model.deep_learning.DeepLearningLCC.normalize_class", "urbanlc.model.deep_learning.DeepLearningLCC.save_model", "urbanlc.model.deep_learning.DeepLearningLCC.set_device", "urbanlc.model.deep_learning.DeepLearningLCC.setup_trainer", "urbanlc.model.deep_learning.DeepLearningLCC.to", "urbanlc.model.deep_learning.DeepLearningLCC.train", "urbanlc.model.deep_learning.DeepLearningLCC.train_one_epoch", "urbanlc.model.deep_learning.DeepLearningLCC.validate", "urbanlc.model.deep_learning.MSSDeepLearning", "urbanlc.model.deep_learning.MSSDeepLearning.build_model", "urbanlc.model.deep_learning.MSSDeepLearning.construct_transform_map", "urbanlc.model.deep_learning.MSSDeepLearning.denormalize_class", "urbanlc.model.deep_learning.MSSDeepLearning.get_metrics", "urbanlc.model.deep_learning.MSSDeepLearning.infer", "urbanlc.model.deep_learning.MSSDeepLearning.load_model", "urbanlc.model.deep_learning.MSSDeepLearning.normalize_class", "urbanlc.model.deep_learning.MSSDeepLearning.save_model", "urbanlc.model.deep_learning.MSSDeepLearning.set_device", "urbanlc.model.deep_learning.MSSDeepLearning.setup_trainer", "urbanlc.model.deep_learning.MSSDeepLearning.to", "urbanlc.model.deep_learning.MSSDeepLearning.train", "urbanlc.model.deep_learning.MSSDeepLearning.train_one_epoch", "urbanlc.model.deep_learning.MSSDeepLearning.validate", "urbanlc.model.deep_learning.OLITIRSDeepLearning", "urbanlc.model.deep_learning.OLITIRSDeepLearning.build_model", "urbanlc.model.deep_learning.OLITIRSDeepLearning.construct_transform_map", "urbanlc.model.deep_learning.OLITIRSDeepLearning.denormalize_class", "urbanlc.model.deep_learning.OLITIRSDeepLearning.get_metrics", "urbanlc.model.deep_learning.OLITIRSDeepLearning.infer", "urbanlc.model.deep_learning.OLITIRSDeepLearning.load_model", "urbanlc.model.deep_learning.OLITIRSDeepLearning.normalize_class", "urbanlc.model.deep_learning.OLITIRSDeepLearning.save_model", "urbanlc.model.deep_learning.OLITIRSDeepLearning.set_device", "urbanlc.model.deep_learning.OLITIRSDeepLearning.setup_trainer", "urbanlc.model.deep_learning.OLITIRSDeepLearning.to", "urbanlc.model.deep_learning.OLITIRSDeepLearning.train", "urbanlc.model.deep_learning.OLITIRSDeepLearning.train_one_epoch", "urbanlc.model.deep_learning.OLITIRSDeepLearning.validate", "urbanlc.model.deep_learning.TMDeepLearning", "urbanlc.model.deep_learning.TMDeepLearning.build_model", "urbanlc.model.deep_learning.TMDeepLearning.construct_transform_map", "urbanlc.model.deep_learning.TMDeepLearning.denormalize_class", "urbanlc.model.deep_learning.TMDeepLearning.get_metrics", "urbanlc.model.deep_learning.TMDeepLearning.infer", "urbanlc.model.deep_learning.TMDeepLearning.load_model", "urbanlc.model.deep_learning.TMDeepLearning.normalize_class", "urbanlc.model.deep_learning.TMDeepLearning.save_model", "urbanlc.model.deep_learning.TMDeepLearning.set_device", "urbanlc.model.deep_learning.TMDeepLearning.setup_trainer", "urbanlc.model.deep_learning.TMDeepLearning.to", "urbanlc.model.deep_learning.TMDeepLearning.train", "urbanlc.model.deep_learning.TMDeepLearning.train_one_epoch", "urbanlc.model.deep_learning.TMDeepLearning.validate", "urbanlc.model.download", "urbanlc.model.download.download_model", "urbanlc.model.pipeline_transforms", "urbanlc.model.pipeline_transforms.AppendBUI", "urbanlc.model.pipeline_transforms.AppendBUI.T_destination", "urbanlc.model.pipeline_transforms.AppendBUI.add_module", "urbanlc.model.pipeline_transforms.AppendBUI.apply", "urbanlc.model.pipeline_transforms.AppendBUI.apply_func", "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform", "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_box", "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_boxes", "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_class", "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_keypoint", "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_mask", "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform", "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_box", "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_boxes", "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_class", "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_keypoint", "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_mask", "urbanlc.model.pipeline_transforms.AppendBUI.bfloat16", "urbanlc.model.pipeline_transforms.AppendBUI.buffers", "urbanlc.model.pipeline_transforms.AppendBUI.children", "urbanlc.model.pipeline_transforms.AppendBUI.compute_transformation", "urbanlc.model.pipeline_transforms.AppendBUI.cpu", "urbanlc.model.pipeline_transforms.AppendBUI.cuda", "urbanlc.model.pipeline_transforms.AppendBUI.double", "urbanlc.model.pipeline_transforms.AppendBUI.dump_patches", "urbanlc.model.pipeline_transforms.AppendBUI.eval", "urbanlc.model.pipeline_transforms.AppendBUI.extra_repr", "urbanlc.model.pipeline_transforms.AppendBUI.float", "urbanlc.model.pipeline_transforms.AppendBUI.forward", "urbanlc.model.pipeline_transforms.AppendBUI.forward_parameters", "urbanlc.model.pipeline_transforms.AppendBUI.generate_parameters", "urbanlc.model.pipeline_transforms.AppendBUI.generate_transformation_matrix", "urbanlc.model.pipeline_transforms.AppendBUI.get_buffer", "urbanlc.model.pipeline_transforms.AppendBUI.get_extra_state", "urbanlc.model.pipeline_transforms.AppendBUI.get_parameter", "urbanlc.model.pipeline_transforms.AppendBUI.get_submodule", "urbanlc.model.pipeline_transforms.AppendBUI.half", "urbanlc.model.pipeline_transforms.AppendBUI.identity_matrix", "urbanlc.model.pipeline_transforms.AppendBUI.inverse_boxes", "urbanlc.model.pipeline_transforms.AppendBUI.inverse_classes", "urbanlc.model.pipeline_transforms.AppendBUI.inverse_inputs", "urbanlc.model.pipeline_transforms.AppendBUI.inverse_keypoints", "urbanlc.model.pipeline_transforms.AppendBUI.inverse_masks", "urbanlc.model.pipeline_transforms.AppendBUI.ipu", "urbanlc.model.pipeline_transforms.AppendBUI.load_state_dict", "urbanlc.model.pipeline_transforms.AppendBUI.modules", "urbanlc.model.pipeline_transforms.AppendBUI.named_buffers", "urbanlc.model.pipeline_transforms.AppendBUI.named_children", "urbanlc.model.pipeline_transforms.AppendBUI.named_modules", "urbanlc.model.pipeline_transforms.AppendBUI.named_parameters", "urbanlc.model.pipeline_transforms.AppendBUI.parameters", "urbanlc.model.pipeline_transforms.AppendBUI.register_backward_hook", "urbanlc.model.pipeline_transforms.AppendBUI.register_buffer", "urbanlc.model.pipeline_transforms.AppendBUI.register_forward_hook", "urbanlc.model.pipeline_transforms.AppendBUI.register_forward_pre_hook", "urbanlc.model.pipeline_transforms.AppendBUI.register_full_backward_hook", "urbanlc.model.pipeline_transforms.AppendBUI.register_load_state_dict_post_hook", "urbanlc.model.pipeline_transforms.AppendBUI.register_module", "urbanlc.model.pipeline_transforms.AppendBUI.register_parameter", "urbanlc.model.pipeline_transforms.AppendBUI.requires_grad_", "urbanlc.model.pipeline_transforms.AppendBUI.set_extra_state", "urbanlc.model.pipeline_transforms.AppendBUI.set_rng_device_and_dtype", "urbanlc.model.pipeline_transforms.AppendBUI.share_memory", "urbanlc.model.pipeline_transforms.AppendBUI.state_dict", "urbanlc.model.pipeline_transforms.AppendBUI.to", "urbanlc.model.pipeline_transforms.AppendBUI.to_empty", "urbanlc.model.pipeline_transforms.AppendBUI.train", "urbanlc.model.pipeline_transforms.AppendBUI.transform_boxes", "urbanlc.model.pipeline_transforms.AppendBUI.transform_classes", "urbanlc.model.pipeline_transforms.AppendBUI.transform_inputs", "urbanlc.model.pipeline_transforms.AppendBUI.transform_keypoints", "urbanlc.model.pipeline_transforms.AppendBUI.transform_masks", "urbanlc.model.pipeline_transforms.AppendBUI.transform_matrix", "urbanlc.model.pipeline_transforms.AppendBUI.transform_output_tensor", "urbanlc.model.pipeline_transforms.AppendBUI.transform_tensor", "urbanlc.model.pipeline_transforms.AppendBUI.type", "urbanlc.model.pipeline_transforms.AppendBUI.validate_tensor", "urbanlc.model.pipeline_transforms.AppendBUI.xpu", "urbanlc.model.pipeline_transforms.AppendBUI.zero_grad", "urbanlc.model.pipeline_transforms.LandsatTransformer", "urbanlc.model.pipeline_transforms.LandsatTransformer.calculate_statistics", "urbanlc.model.pipeline_transforms.LandsatTransformer.transform", "urbanlc.model.pipeline_transforms.MSSTransformer", "urbanlc.model.pipeline_transforms.MSSTransformer.calculate_statistics", "urbanlc.model.pipeline_transforms.MSSTransformer.transform", "urbanlc.model.pipeline_transforms.OLITIRSTransformer", "urbanlc.model.pipeline_transforms.OLITIRSTransformer.calculate_statistics", "urbanlc.model.pipeline_transforms.OLITIRSTransformer.transform", "urbanlc.model.pipeline_transforms.TMTransformer", "urbanlc.model.pipeline_transforms.TMTransformer.calculate_statistics", "urbanlc.model.pipeline_transforms.TMTransformer.transform", "urbanlc.model.pipeline_transforms.compute_BUI", "urbanlc.model.pipeline_transforms.compute_NDBI", "urbanlc.model.pipeline_transforms.compute_NDVI", "urbanlc.model.pipeline_transforms.compute_NDWI", "urbanlc.model.pipeline_transforms.mix_patch", "urbanlc.model.pipeline_transforms.rand_bbox", "urbanlc.model.train_utils", "urbanlc.model.train_utils.combine_prediction", "urbanlc.model.train_utils.load_checkpoint", "urbanlc.model.train_utils.save_checkpoint", "urbanlc.model.train_utils.segment_satelite_image", "urbanlc.model.train_utils.set_seed", "urbanlc.utils", "urbanlc.utils.export_geotiff", "urbanlc.utils.open_at_scale", "urbanlc.utils.open_at_size", "UrbanLC reference documentation", "&lt;no title&gt;", "Test"], "terms": {"function": [2, 3, 4, 5, 12, 13, 16, 18, 19, 20, 21, 23, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 107, 116, 127, 138, 149, 158, 200, 208, 215, 223, 230, 238, 245, 253, 258, 259, 260, 264, 293, 294, 295, 305, 312, 316, 321, 339, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "class": [7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 26, 27, 33, 38, 39, 46, 52, 53, 61, 62, 73, 84, 95, 105, 106, 107, 113, 114, 116, 125, 127, 136, 138, 147, 149, 158, 159, 166, 170, 177, 181, 182, 183, 184, 191, 197, 198, 200, 213, 215, 228, 230, 243, 245, 260, 261, 269, 275, 279, 311, 340, 343, 346, 349], "index": [161, 166, 172, 177, 186, 191, 261, 272, 352, 353, 354, 355], "modul": [0, 1, 6, 8, 13, 259, 263, 264, 278, 279, 280, 282, 283, 284, 286, 287, 288, 294, 296, 297, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 336, 338, 360, 361, 363], "search": [165, 166, 176, 177, 190, 191, 196], "page": [], "api": [22, 369], "util": [312, 314, 315, 316, 317, 368], "download": [165, 176, 190, 368], "base": [26, 31, 32, 33, 54, 55, 56, 57, 58, 64, 65, 66, 69, 75, 76, 77, 80, 86, 87, 88, 91, 97, 98, 99, 101, 115, 123, 126, 134, 137, 145, 148, 156, 166, 177, 191, 198, 213, 228, 243, 259, 368], "esa2021_download": 368, "landsat_download": 368, "analyz": 368, "metric": [202, 211, 217, 226, 232, 241, 247, 256, 368], "visual": 368, "dictionari": [8, 26, 31, 124, 135, 146, 157, 195, 199, 202, 208, 211, 212, 214, 217, 223, 226, 227, 229, 232, 238, 241, 242, 244, 247, 253, 256, 257, 324, 365], "map": [8, 26, 27, 35, 37, 107, 116, 117, 123, 127, 128, 134, 138, 139, 145, 149, 150, 156, 162, 173, 187, 200, 203, 215, 218, 230, 233, 245, 248, 305, 368], "landsat": [8, 16, 35, 37, 62, 63, 65, 67, 68, 71, 73, 74, 76, 78, 79, 82, 84, 85, 87, 89, 90, 93, 95, 96, 98, 100, 103, 117, 119, 121, 124, 125, 128, 130, 132, 135, 136, 139, 141, 143, 146, 147, 150, 152, 154, 157, 158, 195, 213, 228, 243, 340, 342, 343, 345, 346, 348, 349, 351, 352, 353, 354, 355, 368], "surfac": [8, 73, 84], "reflect": [8, 73, 84], "dataset": [8, 16, 35, 37, 68, 79, 90, 100, 158, 159, 160, 161, 162, 163, 165, 167, 168, 170, 171, 172, 173, 174, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 195, 341, 344, 347, 350], "name": [8, 35, 37, 107, 115, 116, 126, 127, 137, 138, 148, 149, 160, 166, 168, 171, 177, 179, 185, 191, 193, 199, 200, 206, 214, 215, 221, 229, 230, 236, 244, 245, 251, 263, 293, 295, 296, 307, 308, 309, 310, 313, 318, 319, 324, 361], "earth": [8, 40, 54, 64, 68, 75, 79, 86, 90, 97, 100], "engin": [8, 40, 54, 64, 68, 75, 79, 86, 90, 97, 100], "collect": 8, "path": [8, 26, 27, 32, 33, 34, 35, 45, 60, 72, 83, 94, 104, 117, 118, 119, 121, 124, 128, 129, 130, 132, 135, 139, 140, 141, 143, 146, 150, 151, 152, 154, 157, 196, 203, 204, 212, 218, 219, 227, 233, 234, 242, 248, 249, 257, 293, 295, 296, 341, 344, 347, 350, 360, 365, 366, 367], "attribut": [8, 46, 159, 170, 181, 261, 263, 313, 317, 319, 320], "modifi": [16, 158, 278, 282, 283, 284, 288, 297, 304, 314, 315, 316, 317, 325, 336, 338], "from": [16, 24, 25, 28, 29, 31, 48, 49, 67, 68, 79, 90, 95, 100, 118, 119, 125, 129, 130, 136, 140, 141, 147, 151, 152, 158, 164, 165, 166, 175, 176, 177, 189, 190, 191, 196, 259, 263, 305, 313, 319, 321, 324, 341, 343, 344, 346, 347, 349, 350, 352, 353, 354, 355, 359, 360, 368], "http": [16, 68, 79, 90, 100, 158, 368], "github": [16, 158, 368], "com": [16, 68, 79, 90, 100, 158, 368], "microsoft": [16, 158], "torchgeo": [16, 158], "blob": [16, 158], "main": [16, 158], "py": [16, 158], "geo": [16, 158], "The": [25, 26, 31, 32, 33, 34, 35, 36, 55, 57, 65, 71, 76, 82, 87, 93, 98, 103, 166, 177, 191, 259, 263, 272, 293, 295, 296, 313, 314, 315, 316, 317, 319, 322, 324, 325, 326, 359, 361, 366, 367, 368], "refer": [26, 68, 79, 90, 100, 163, 174, 188, 293, 295, 296, 324, 367], "m": [24, 25, 28, 29, 164, 175, 189, 264, 306, 309], "ndarrai": [24, 25, 26, 28, 29, 33, 34, 35, 117, 119, 122, 123, 128, 130, 133, 134, 139, 141, 144, 145, 150, 152, 155, 156, 203, 218, 233, 248, 352, 353, 354, 355, 365, 366, 367], "float": [24, 25, 26, 27, 32, 40, 42, 46, 47, 48, 49, 50, 54, 55, 56, 64, 65, 66, 75, 76, 77, 86, 87, 88, 97, 98, 99, 121, 132, 143, 154, 211, 226, 241, 256, 278, 284, 297, 325, 340, 341, 342, 344, 345, 347, 348, 350, 351, 356, 357, 366], "calcul": [24, 25, 26, 27, 28, 29, 166, 177, 191, 341, 344, 347, 350], "confus": [24, 25, 26, 28, 29, 286, 320], "matrix": [24, 25, 26, 28, 29, 298], "paramet": [24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 37, 40, 42, 43, 45, 48, 49, 50, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 101, 103, 104, 115, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 182, 183, 184, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 264, 272, 278, 282, 283, 284, 288, 289, 295, 297, 304, 305, 310, 313, 319, 320, 324, 325, 326, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367], "np": [24, 25, 26, 28, 29, 117, 119, 122, 123, 128, 130, 133, 134, 139, 141, 144, 145, 150, 152, 155, 156, 203, 218, 233, 248, 352, 353, 354, 355, 365, 366, 367], "return": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 48, 49, 50, 54, 56, 57, 58, 59, 63, 64, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 172, 174, 182, 183, 184, 186, 188, 195, 196, 201, 202, 203, 205, 211, 212, 216, 217, 218, 220, 226, 227, 231, 232, 233, 235, 241, 242, 246, 247, 248, 250, 256, 257, 259, 264, 272, 278, 279, 280, 282, 283, 284, 286, 288, 293, 294, 295, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 320, 324, 325, 326, 327, 336, 338, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367], "sum": [24, 28, 29, 33], "diagon": [24, 28, 29], "element": [24, 28, 29], "divid": [24, 28, 29, 50], "all": [24, 160, 171, 185, 278, 279, 282, 283, 284, 288, 289, 297, 304, 306, 307, 309, 310, 311, 316, 325, 336, 338, 339, 368], "type": [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 48, 49, 50, 56, 57, 66, 68, 71, 77, 79, 82, 88, 90, 93, 99, 100, 103, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 195, 201, 202, 203, 205, 211, 212, 216, 217, 218, 220, 226, 227, 231, 232, 233, 235, 241, 242, 246, 247, 248, 250, 256, 257, 259, 264, 272, 279, 311, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 366, 367], "cohen": 25, "": [25, 28, 29, 293, 294, 295, 296, 305, 313, 316, 317, 319, 324, 325], "kappa": 25, "coeffici": 25, "measur": 25, "agreement": 25, "between": [25, 107, 116, 127, 138, 149, 200, 215, 230, 245, 286, 313, 320], "observ": [25, 121, 132, 143, 154], "adjust": 25, "chanc": 25, "comput": [25, 261, 272, 314, 316, 352, 353, 354, 355], "row": [25, 29], "column": [25, 28], "total": 25, "well": [25, 264, 293, 295, 307, 308, 309, 310], "expect": [25, 317, 337], "probabl": [25, 203, 218, 233, 248, 342, 345, 348, 351], "final": 25, "i": [25, 26, 31, 32, 33, 34, 35, 36, 42, 56, 65, 66, 76, 77, 87, 88, 98, 99, 166, 169, 177, 180, 191, 194, 259, 286, 293, 294, 295, 296, 305, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 325, 337, 342, 345, 348, 351, 359, 366, 367, 368], "pred_path": 26, "str": [26, 27, 32, 33, 34, 35, 37, 39, 40, 43, 45, 54, 58, 60, 64, 69, 71, 72, 75, 80, 82, 83, 86, 91, 93, 94, 97, 101, 103, 104, 106, 114, 117, 118, 119, 121, 124, 128, 129, 130, 132, 135, 139, 140, 141, 143, 146, 150, 151, 152, 154, 157, 160, 168, 171, 179, 185, 193, 196, 198, 199, 202, 203, 204, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 221, 222, 223, 225, 226, 227, 229, 232, 233, 234, 236, 237, 238, 240, 241, 242, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 287, 289, 290, 291, 292, 293, 295, 296, 299, 300, 301, 302, 303, 305, 307, 308, 309, 310, 313, 317, 318, 319, 324, 326, 328, 329, 330, 331, 332, 336, 340, 341, 344, 347, 350, 359, 360, 361, 365, 366, 367], "gt_path": [26, 119, 121, 124, 130, 132, 135, 141, 143, 146, 152, 154, 157, 212, 227, 242, 257], "mapper_gt": 26, "list": [26, 27, 32, 40, 42, 46, 47, 50, 54, 55, 56, 64, 65, 66, 71, 75, 76, 77, 82, 86, 87, 88, 93, 97, 98, 99, 103, 106, 117, 119, 120, 121, 124, 128, 130, 131, 132, 135, 139, 141, 142, 143, 146, 150, 152, 153, 154, 157, 160, 168, 171, 179, 185, 193, 195, 196, 212, 227, 242, 257, 305, 317, 340, 341, 344, 347, 350, 359, 362], "0": [26, 33, 40, 50, 54, 64, 75, 86, 97, 121, 132, 143, 154, 163, 174, 188, 198, 264, 306, 309, 325, 342, 343, 345, 346, 348, 349, 351, 356], "1": [26, 32, 33, 62, 65, 67, 76, 87, 98, 121, 125, 132, 143, 154, 213, 264, 306, 309, 325, 342, 343, 345, 346, 348, 349, 351, 356], "10": [26, 27, 40, 54, 64, 65, 75, 76, 86, 87, 97, 98], "11": [26, 65, 76, 87, 98], "12": [26, 65, 76, 87, 98], "20": [26, 27, 343], "30": [26, 27, 343], "40": [26, 27], "50": [26, 27], "60": [26, 27], "61": 26, "62": 26, "70": [26, 27], "71": 26, "72": 26, "80": [26, 27], "81": 26, "82": 26, "90": [26, 27], "100": [26, 27, 296], "110": 26, "120": 26, "121": 26, "122": 26, "130": 26, "140": 26, "150": 26, "3": [26, 33, 65, 76, 87, 98, 296, 325], "151": 26, "152": 26, "153": 26, "160": 26, "170": 26, "180": 26, "190": 26, "200": [26, 296], "201": 26, "202": 26, "210": 26, "2": [26, 65, 71, 76, 82, 87, 93, 98, 103, 163, 174, 188, 264, 296, 306, 309, 325], "220": 26, "4": [26, 65, 76, 84, 87, 89, 98, 147, 243, 349], "mapper_pr": 26, "95": [26, 27], "gt_downscale_factor": 26, "option": [26, 27, 32, 33, 34, 35, 39, 40, 54, 55, 64, 65, 71, 75, 76, 82, 86, 87, 93, 97, 98, 103, 106, 119, 121, 130, 132, 141, 143, 152, 154, 196, 198, 203, 210, 211, 212, 218, 225, 226, 227, 233, 240, 241, 242, 248, 255, 256, 257, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 289, 299, 300, 301, 302, 303, 304, 305, 309, 313, 316, 318, 319, 324, 328, 329, 330, 331, 332, 333, 338, 340, 341, 342, 344, 345, 347, 348, 350, 351, 356, 359, 360, 362, 365], "none": [26, 32, 33, 34, 35, 36, 37, 40, 43, 44, 45, 54, 55, 58, 59, 60, 64, 65, 69, 70, 71, 72, 75, 76, 80, 81, 82, 83, 86, 87, 91, 92, 93, 94, 97, 98, 101, 102, 103, 104, 106, 115, 118, 120, 121, 123, 126, 129, 131, 132, 134, 137, 140, 142, 143, 145, 148, 151, 153, 154, 156, 159, 170, 182, 183, 184, 196, 198, 199, 203, 204, 206, 207, 208, 210, 212, 214, 218, 219, 221, 222, 223, 225, 227, 229, 233, 234, 236, 237, 238, 240, 242, 244, 248, 249, 251, 252, 253, 255, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 283, 289, 299, 300, 301, 302, 303, 304, 305, 309, 312, 313, 314, 315, 316, 317, 318, 319, 322, 324, 325, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 360, 361, 362, 363, 365], "use_pred_as_ref": 26, "bool": [26, 33, 39, 40, 54, 55, 64, 65, 71, 75, 76, 82, 86, 87, 93, 97, 98, 103, 119, 121, 130, 132, 141, 143, 152, 154, 203, 212, 218, 227, 233, 242, 248, 257, 279, 285, 305, 307, 309, 310, 311, 313, 320, 324, 327, 339, 342, 345, 348, 351, 365], "fals": [26, 71, 82, 93, 103, 119, 130, 141, 152, 159, 167, 169, 178, 180, 192, 194, 203, 218, 233, 248, 285, 286, 313, 324, 325, 327, 339], "predict": [26, 359], "ground": [26, 37, 119, 121, 124, 130, 132, 135, 141, 143, 146, 152, 154, 157, 201, 205, 212, 216, 220, 227, 231, 235, 242, 246, 250, 257, 356], "truth": [26, 37, 119, 121, 124, 130, 132, 135, 141, 143, 146, 152, 154, 157, 201, 205, 212, 216, 220, 227, 231, 235, 242, 246, 250, 257, 356], "data": [26, 27, 33, 34, 35, 37, 39, 45, 55, 60, 62, 65, 71, 72, 73, 76, 82, 83, 84, 87, 93, 94, 95, 98, 103, 104, 119, 120, 121, 125, 130, 131, 132, 136, 141, 142, 143, 147, 152, 153, 154, 169, 180, 194, 195, 210, 212, 225, 227, 240, 242, 255, 257, 340, 343, 346, 349, 365, 366, 367], "thi": [26, 31, 32, 33, 34, 35, 36, 37, 41, 96, 165, 176, 190, 259, 263, 278, 279, 282, 283, 284, 286, 287, 288, 293, 294, 295, 296, 297, 304, 305, 307, 310, 311, 312, 313, 314, 316, 317, 319, 320, 321, 324, 325, 326, 327, 336, 338, 359, 360, 361, 362, 363, 365, 366, 367, 368], "take": [26, 33, 34, 35, 37, 362], "downscal": [26, 27], "super": 26, "ar": [26, 31, 36, 42, 55, 56, 65, 66, 71, 76, 77, 82, 87, 88, 93, 98, 99, 103, 166, 177, 191, 267, 269, 270, 271, 273, 275, 276, 277, 279, 286, 287, 306, 307, 309, 310, 311, 313, 316, 317, 319, 322, 324, 325, 327, 368], "appli": [26, 63, 74, 85, 96, 267, 269, 270, 271, 316, 342, 345, 348, 351, 366], "result": [26, 32, 36, 124, 135, 146, 157, 203, 212, 218, 227, 233, 242, 248, 257, 296, 309, 317], "numpi": [26, 33, 34, 35, 203, 218, 233, 248, 363, 365], "arrai": [26, 203, 218, 233, 248, 365, 367], "default": [26, 27, 32, 33, 34, 35, 207, 222, 237, 252, 289, 305, 313, 320, 324, 327, 356, 359, 360, 361, 362, 365], "esa1992_map": 26, "esa2021_map": 26, "factor": [26, 63, 74, 85, 96, 211, 226, 241, 256, 366], "If": [26, 33, 34, 35, 42, 56, 66, 77, 88, 99, 289, 293, 295, 296, 305, 313, 319, 324], "true": [26, 33, 39, 40, 54, 55, 64, 65, 75, 76, 86, 87, 97, 98, 121, 132, 143, 154, 166, 167, 169, 170, 177, 178, 180, 191, 192, 194, 203, 212, 218, 227, 233, 242, 248, 257, 264, 279, 289, 296, 305, 306, 307, 309, 310, 311, 313, 317, 320, 324, 325, 327, 342, 345, 348, 351, 365], "us": [26, 33, 34, 35, 36, 42, 55, 56, 62, 65, 66, 68, 71, 73, 76, 77, 79, 82, 84, 87, 88, 90, 93, 98, 99, 100, 103, 121, 122, 124, 125, 132, 133, 135, 136, 143, 144, 146, 147, 154, 155, 157, 162, 164, 165, 166, 168, 173, 175, 176, 177, 179, 187, 189, 190, 191, 193, 203, 207, 212, 213, 218, 222, 227, 228, 233, 237, 242, 243, 248, 252, 257, 263, 264, 296, 312, 313, 314, 315, 316, 317, 319, 324, 352, 361, 365, 367], "otherwis": [26, 279, 293, 295, 296, 307, 310, 311, 324], "downsample_scal": [27, 366], "indic": [27, 40, 54, 55, 64, 65, 71, 75, 76, 82, 86, 87, 93, 97, 98, 103, 107, 116, 127, 138, 149, 200, 215, 230, 245, 342, 345, 348, 351], "distribut": [27, 33, 356, 357], "land": [27, 34, 37, 106, 117, 119, 121, 124, 128, 130, 132, 135, 139, 141, 143, 146, 150, 152, 154, 157, 198, 342, 345, 348, 351, 368], "cover": [27, 34, 37, 106, 117, 119, 121, 124, 128, 130, 132, 135, 139, 141, 143, 146, 150, 152, 154, 157, 170, 198, 342, 345, 348, 351, 368], "specifi": [27, 32, 33, 34, 35, 40, 43, 48, 49, 50, 54, 55, 57, 58, 64, 65, 69, 75, 76, 80, 86, 87, 91, 97, 98, 101, 117, 119, 121, 122, 124, 128, 130, 132, 133, 135, 139, 141, 143, 144, 146, 150, 152, 154, 155, 157, 196, 202, 217, 232, 247, 259, 283, 293, 295, 296, 304, 326, 338, 359, 361, 362, 365, 366, 367], "resolut": [27, 40, 54, 64, 75, 86, 97], "ratio": [27, 121, 132, 143, 154], "repres": [27, 40, 46, 54, 64, 75, 86, 97], "esa2021_class": 27, "proport": 27, "produc": 28, "accuraci": [28, 29], "each": [28, 29, 169, 180, 194, 264, 316, 359, 362], "user": [29, 315, 324], "retriev": [31, 36, 71, 82, 93, 103, 119, 130, 141, 152], "colormap": [31, 34, 36], "normal": [31, 33, 201, 205, 216, 220, 231, 235, 246, 250, 353, 354, 355], "esa": [31, 36, 53, 55, 170, 195], "european": [31, 36], "space": [31, 36], "agenc": [31, 36], "worldcov": [31, 36, 53, 55], "2021": [31, 36, 57, 65, 76, 87, 98, 170], "v200": [31, 36, 53, 170], "label": [31, 33, 36, 107, 116, 123, 127, 134, 138, 145, 149, 156, 200, 201, 205, 215, 216, 220, 230, 231, 235, 245, 246, 250], "creat": [31, 32, 36, 48, 49, 324], "esa2021_label": 31, "configur": 31, "black": 31, "color": [31, 162, 173, 187], "valu": [31, 33, 34, 35, 36, 289, 315, 341, 344, 347, 350, 357, 363], "under": [31, 339], "over": [31, 32, 279, 280, 306, 307, 308, 309, 310, 311], "defin": 31, "bound": [31, 42, 46, 48, 50, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99, 262, 296, 357, 359, 362], "deriv": 31, "kei": [31, 289, 305, 317, 324], "tupl": [31, 33, 71, 82, 93, 103, 119, 120, 130, 131, 141, 142, 152, 153, 162, 173, 187, 211, 226, 241, 256, 307, 308, 309, 310, 312, 315, 316, 334, 341, 342, 344, 345, 347, 348, 350, 351, 356, 357, 359, 360, 362], "matplotlib": [31, 34, 35, 37], "listedcolormap": 31, "boundarynorm": 31, "img_path": [32, 117, 119, 121, 124, 128, 130, 132, 135, 139, 141, 143, 146, 150, 152, 154, 157, 203, 212, 218, 227, 233, 242, 248, 257], "root": [32, 39, 45, 60, 72, 83, 94, 104, 159, 170, 181, 182, 183, 184, 196, 212, 227, 242, 257, 341, 344, 347, 350], "framer": 32, "save_path": [32, 34, 35, 106, 365], "output": [32, 33, 34, 35, 55, 65, 68, 71, 76, 79, 82, 87, 90, 93, 98, 100, 103, 314, 316, 334], "mp4": 32, "video": 32, "plot": [32, 33, 34, 35, 162, 168, 173, 179, 187, 193], "chang": [32, 294, 312, 313, 320, 322], "time": [32, 314, 315, 316, 342, 345, 348, 351], "imag": [32, 35, 36, 37, 40, 41, 43, 54, 58, 63, 64, 65, 68, 69, 71, 74, 75, 76, 79, 80, 82, 85, 86, 87, 90, 91, 93, 96, 97, 98, 100, 101, 103, 117, 119, 121, 122, 124, 128, 130, 132, 133, 135, 139, 141, 143, 144, 146, 150, 152, 154, 155, 157, 203, 212, 218, 227, 233, 242, 248, 257, 342, 345, 348, 351, 352, 353, 354, 355, 356, 359, 362, 368], "directori": [32, 44, 45, 59, 60, 70, 72, 81, 83, 92, 94, 102, 104, 182, 183, 184, 196, 212, 227, 242, 257, 259, 341, 344, 347, 350, 361], "either": [32, 315, 317], "within": [32, 321], "can": [32, 33, 34, 35, 263, 312, 313, 314, 315, 316, 317, 319, 325, 359, 365, 368], "save": [32, 33, 34, 35, 43, 55, 58, 65, 69, 76, 80, 87, 91, 98, 101, 110, 120, 131, 142, 153, 206, 221, 236, 251, 313, 361, 365], "file": [32, 33, 34, 35, 40, 43, 54, 58, 64, 65, 69, 75, 76, 80, 86, 87, 91, 97, 98, 101, 117, 118, 119, 120, 121, 124, 128, 129, 130, 131, 132, 135, 139, 140, 141, 142, 143, 146, 150, 151, 152, 153, 154, 157, 165, 166, 169, 176, 177, 180, 190, 191, 194, 196, 206, 212, 221, 227, 236, 242, 251, 257, 341, 344, 347, 350, 360, 361, 365, 366, 367], "contain": [32, 37, 71, 82, 93, 103, 119, 120, 124, 130, 131, 135, 141, 142, 146, 152, 153, 157, 164, 166, 167, 175, 177, 178, 189, 191, 192, 195, 196, 199, 208, 214, 223, 229, 238, 244, 253, 264, 305, 307, 308, 310, 314, 315, 316, 317, 324, 325, 368], "outfil": 33, "figsiz": 33, "int": [33, 40, 54, 55, 57, 64, 65, 67, 71, 75, 76, 78, 82, 86, 87, 89, 93, 97, 98, 103, 106, 119, 120, 130, 131, 141, 142, 152, 153, 162, 173, 187, 198, 203, 206, 211, 218, 221, 226, 233, 236, 241, 248, 251, 256, 261, 272, 283, 304, 334, 338, 341, 342, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365], "6": [33, 65, 76, 87, 98], "input": [33, 122, 133, 144, 155, 195, 203, 218, 233, 248, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 289, 292, 298, 299, 300, 301, 302, 303, 314, 315, 316, 328, 329, 330, 331, 332, 335, 337, 340, 342, 343, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 362, 365, 366, 367], "flatten": 33, "bar": 33, "an": [33, 34, 35, 39, 57, 263, 279, 280, 289, 293, 295, 296, 306, 307, 308, 309, 310, 311, 314, 316, 317, 319, 324], "provid": [33, 34, 35, 37, 42, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99, 115, 123, 126, 134, 137, 145, 148, 156, 294, 324, 365, 367], "doe": [33, 34, 35, 164, 175, 189], "ani": [33, 34, 35, 119, 120, 121, 124, 130, 131, 132, 135, 141, 142, 143, 146, 152, 153, 154, 157, 166, 177, 191, 196, 198, 199, 202, 208, 209, 210, 211, 212, 214, 217, 223, 224, 225, 226, 227, 229, 232, 238, 239, 240, 241, 242, 244, 247, 253, 254, 255, 256, 257, 262, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 281, 286, 292, 294, 299, 300, 301, 302, 303, 305, 321, 327, 328, 329, 330, 331, 332, 335, 340, 365], "which": [33, 296, 368], "size": [33, 40, 50, 54, 64, 75, 86, 97, 119, 130, 141, 152, 195, 279, 291, 307, 310, 311, 357, 359, 362, 365, 367], "figur": 33, "img": [34, 35, 122, 133, 144, 155, 342, 345, 348, 351, 352, 353, 354, 355, 362, 365], "ax": [34, 35, 37], "titl": [34, 35], "given": [34, 35, 196, 263, 292, 293, 295, 296, 313, 314, 315, 316, 317, 319, 325], "axi": [34, 35, 36, 37], "where": [34, 35], "displai": [34, 35, 36, 37, 55, 65, 76, 87, 98], "rgb": [35, 37, 168, 179, 193], "band": [35, 40, 54, 63, 64, 74, 75, 85, 86, 96, 97, 159, 160, 166, 168, 169, 170, 171, 177, 179, 180, 185, 191, 193, 194, 341, 344, 347, 350, 352, 353, 354, 355, 365], "imageri": [35, 167, 178, 192], "e": [35, 37, 207, 222, 237, 252, 286, 316, 320, 324, 325, 327], "g": [35, 37, 207, 222, 237, 252, 286, 320, 324, 325, 327], "landsat8": [35, 37], "descript": 36, "represent": [36, 287], "get_esa_colormap": 36, "secondari": 36, "x": [36, 365], "tensor": [37, 201, 203, 205, 216, 218, 220, 231, 233, 235, 246, 248, 250, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 307, 311, 312, 313, 316, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 342, 345, 348, 351, 356, 357, 359, 362], "gt": [37, 201, 205, 216, 220, 231, 235, 246, 250, 356], "batch": [37, 195], "correspond": [37, 267, 269, 270, 271, 273, 275, 276, 277, 289, 294, 305, 316, 321, 324, 362], "It": [37, 165, 176, 190, 314, 315, 317, 324, 362, 368], "side": 37, "torch": [37, 201, 203, 205, 216, 218, 220, 231, 233, 235, 246, 248, 250, 259, 264, 272, 279, 293, 295, 296, 307, 311, 312, 313, 314, 315, 316, 317, 323, 325, 326, 339, 342, 345, 348, 351, 356, 359, 360, 361, 362, 363], "clear_cach": 39, "serv": 39, "abstract": [39, 41, 95, 96, 106, 108, 109, 110, 111, 112, 114], "variou": 39, "method": [39, 41, 46, 53, 62, 73, 84, 95, 96, 106, 108, 109, 110, 111, 112, 114, 125, 136, 147, 159, 170, 181, 198, 213, 228, 243, 261, 278, 282, 283, 284, 287, 288, 293, 295, 297, 304, 320, 325, 336, 338, 340, 343, 346, 349, 359, 365], "bbox": [40, 54, 64, 75, 86, 97], "boundingbox": [40, 42, 54, 56, 64, 66, 75, 77, 86, 88, 97, 99, 161, 172, 186], "scale": [40, 54, 63, 64, 71, 74, 75, 82, 85, 86, 93, 96, 97, 103], "format": [40, 42, 54, 56, 64, 66, 75, 77, 86, 88, 97, 99, 164, 165, 175, 176, 189, 190, 325, 337, 365], "geotiff": [40, 43, 54, 58, 64, 69, 75, 80, 86, 91, 97, 101, 365], "base_filenam": [40, 43, 54, 58, 64, 69, 75, 80, 86, 91, 97, 101], "step": [40, 50, 54, 64, 75, 86, 97, 211, 226, 241, 256], "07": [40, 50, 54, 64, 75, 86, 97], "merge_fil": [40, 54, 64, 75, 86, 97], "num_work": [40, 54, 55, 64, 65, 75, 76, 86, 87, 97, 98, 195], "8": [40, 54, 55, 64, 65, 73, 75, 76, 78, 86, 87, 97, 98, 136, 195, 228, 346], "parallel": [40, 54, 64, 75, 86, 97], "patch": [40, 43, 50, 54, 58, 64, 69, 75, 80, 86, 91, 97, 101, 342, 345, 348, 351, 356, 359, 362], "ee": [40, 54, 63, 64, 68, 71, 74, 75, 79, 82, 85, 86, 90, 93, 97, 100, 103], "instanc": [40, 42, 48, 49, 54, 56, 57, 64, 66, 67, 75, 77, 78, 86, 88, 89, 97, 99, 182, 183, 184, 309], "region": [40, 46, 54, 64, 71, 75, 82, 86, 93, 97, 103, 359], "spatial": [40, 54, 64, 75, 86, 97], "meter": [40, 54, 64, 75, 86, 97], "filenam": [40, 43, 54, 58, 64, 69, 75, 80, 86, 91, 97, 101, 164, 166, 175, 177, 182, 183, 184, 189, 191, 196, 206, 221, 236, 251], "partit": [40, 50, 54, 64, 75, 86, 97, 359, 362], "interest": [40, 54, 64, 71, 75, 82, 86, 93, 97, 103], "flag": [40, 54, 55, 64, 65, 71, 75, 76, 82, 86, 87, 93, 97, 98, 103, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 289, 292, 299, 300, 301, 302, 303, 328, 329, 330, 331, 332, 342, 345, 348, 351], "whether": [40, 54, 55, 64, 65, 71, 75, 76, 82, 86, 87, 93, 97, 98, 103, 119, 121, 130, 132, 141, 143, 152, 154, 203, 212, 218, 227, 233, 242, 248, 257, 296, 305, 309, 313, 320, 327, 342, 345, 348, 351, 365], "merg": [40, 43, 54, 58, 64, 69, 75, 80, 86, 91, 97, 101], "number": [40, 54, 55, 62, 64, 65, 75, 76, 86, 87, 97, 98, 166, 177, 191, 195, 211, 226, 241, 256, 296, 322, 341, 342, 344, 345, 347, 348, 350, 351, 363], "worker": [40, 54, 55, 64, 65, 75, 76, 86, 87, 97, 98, 195], "concurr": [40, 54, 55, 64, 65, 75, 76, 86, 87, 97, 98], "subclass": [41, 96], "must": [41, 96, 305], "implement": [41, 96, 287, 294, 321], "radiu": [42, 49, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99], "box": [42, 46, 48, 50, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99, 267, 268, 273, 274, 299, 328, 357, 359, 362], "coordin": [42, 48, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99, 163, 174, 188, 357, 359, 362], "lon_min": [42, 48, 56, 66, 77, 88, 99], "lat_min": [42, 48, 56, 66, 77, 88, 99], "lon_max": [42, 48, 56, 66, 77, 88, 99], "lat_max": [42, 48, 56, 66, 77, 88, 99], "center": [42, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99], "lon": [42, 49, 56, 66, 77, 88, 99], "lat": [42, 49, 56, 66, 77, 88, 99], "around": [42, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99], "onli": [42, 55, 56, 65, 66, 76, 77, 87, 88, 98, 99, 279, 286, 294, 306, 307, 309, 310, 311, 313, 314, 315, 316, 325, 327], "rais": [42, 56, 66, 77, 88, 99, 293, 295, 296, 305, 316], "valueerror": [42, 56, 66, 77, 88, 99], "invalid": [42, 56, 66, 77, 88, 99, 293, 295, 296], "compress": [43, 58, 69, 80, 91, 101, 365], "packbit": [43, 58, 69, 80, 91, 101], "algorithm": [43, 58, 68, 69, 79, 80, 90, 91, 100, 101], "remov": [44, 59, 70, 81, 92, 102, 309, 312, 314, 315, 316, 317], "cach": [44, 59, 70, 81, 92, 102, 159, 170, 203, 212, 218, 227, 233, 242, 248, 257], "recreat": [44, 59, 70, 81, 92, 102], "set": [45, 60, 72, 83, 94, 104, 207, 208, 222, 223, 237, 238, 252, 253, 286, 287, 292, 309, 313, 317, 320, 324, 325, 327, 339, 363, 368], "store": [45, 60, 72, 83, 94, 104, 169, 180, 194, 259, 294, 309, 321], "geometri": [46, 51, 71, 82, 93, 103], "geograph": 46, "classmethod": [48, 49, 57, 67, 78, 89, 182, 183, 184], "minimum": 48, "longitud": [48, 49], "latitud": [48, 49], "maximum": [48, 211, 226, 241, 256], "20000": 49, "point": [49, 121, 132, 143, 154, 278, 284, 288, 297, 325], "dataset_nam": [53, 62, 73, 84, 95], "arg": [53, 57, 62, 67, 73, 78, 84, 89, 95, 114, 125, 136, 147, 181, 182, 183, 184, 198, 213, 228, 243, 263, 264, 279, 283, 289, 293, 295, 296, 305, 307, 309, 310, 311, 313, 319, 320, 321, 324, 325, 326, 327, 336, 339], "kwarg": [53, 57, 62, 67, 73, 78, 84, 89, 95, 114, 125, 136, 147, 181, 182, 183, 184, 198, 208, 213, 223, 228, 238, 243, 253, 289, 316, 325, 328, 329, 330, 331, 332], "10m": 53, "v100": 53, "verbos": [55, 65, 76, 87, 98], "log": [55, 65, 76, 87, 98], "messag": [55, 65, 76, 87, 98], "year": [57, 65, 71, 76, 82, 87, 93, 98, 103], "target": [57, 65, 71, 76, 82, 87, 93, 98, 103, 293, 295, 296], "2020": [57, 65, 76, 87, 98], "addit": [57, 166, 177, 182, 183, 184, 191, 317, 325], "posit": [57, 182, 183, 184, 314, 315, 316, 324], "argument": [57, 182, 183, 184, 304, 314, 315, 316, 317, 324, 325, 338], "pass": [57, 289, 311, 314, 315, 316], "constructor": 57, "keyword": [57, 182, 183, 184, 196, 314, 315, 324, 325, 341, 344, 347, 350], "dn": 62, "digit": 62, "5": [62, 65, 67, 76, 87, 89, 98, 125, 213, 342, 343, 345, 348, 351], "mss": [62, 125, 195, 213, 343, 368], "sensor": [62, 73, 84, 125, 136, 147, 182, 183, 184, 195, 213, 228, 243, 259, 343, 346, 349, 368], "union": [65, 71, 76, 82, 87, 93, 98, 103, 119, 130, 141, 152, 203, 207, 218, 222, 233, 237, 248, 252, 283, 304, 312, 316, 326, 336, 338, 341, 342, 344, 345, 347, 348, 350, 351], "2013": [65, 76, 87, 98], "2014": [65, 76, 87, 98], "2015": [65, 76, 87, 98], "2016": [65, 76, 87, 98], "2017": [65, 76, 87, 98], "2018": [65, 76, 87, 98], "2019": [65, 76, 87, 98], "month": [65, 71, 76, 82, 87, 93, 98, 103], "7": [65, 76, 84, 87, 89, 98, 147, 243, 349], "9": [65, 73, 76, 78, 87, 98, 136, 228, 346], "allow_tier2": [65, 76, 87, 98], "overwrit": [65, 76, 87, 98, 289], "pixel": [65, 71, 76, 82, 87, 93, 98, 103, 121, 132, 143, 154], "wise": [65, 71, 76, 82, 87, 93, 98, 103], "median": [65, 71, 76, 82, 87, 93, 98, 103], "allow": [65, 76, 87, 98, 316], "fall": [65, 76, 87, 98], "back": [65, 76, 87, 98], "tier": [65, 71, 76, 82, 87, 93, 98, 103], "unavail": [65, 76, 87, 98], "exist": [65, 76, 87, 98, 293, 295, 296, 305], "n_landsat": [67, 78, 89], "annot": [67, 78, 89], "field": [67, 78, 89, 305], "ge": [67, 78, 89], "le": [67, 78, 89], "version": [67, 78, 89, 163, 174, 188, 312], "satellit": [67, 78, 89, 362], "mask": [68, 71, 79, 82, 90, 93, 100, 103, 167, 178, 192, 271, 277, 342, 345, 348, 351], "cloud": [68, 71, 79, 82, 90, 93, 100, 103], "shadow": [68, 79, 90, 100], "snow": [68, 79, 90, 100], "cfmask": [68, 79, 90, 100], "develop": [68, 79, 90, 100, 368], "googl": [68, 79, 90, 100, 259], "catalog": [68, 79, 90, 100], "landsat_lc08_c02_t1_l2": [68, 79, 90, 100], "www": [68, 79, 90, 100], "usg": [68, 79, 90, 100], "gov": [68, 79, 90, 100], "mission": [68, 79, 90, 100], "use_tier2": [71, 82, 93, 103], "specif": [71, 82, 93, 103, 115, 126, 137, 148, 165, 166, 176, 177, 190, 191, 199, 214, 229, 244], "annual": [71, 82, 93, 103], "reproject": [71, 82, 93, 103], "espg": [71, 82, 93, 103], "4326": [71, 82, 93, 103], "date": [71, 82, 93, 103, 164, 166, 175, 177, 189, 191, 368], "oli": [73, 136, 183, 228, 346, 368], "tir": [73, 136, 183, 228, 346, 368], "tm": [84, 147, 195, 243, 349, 368], "gee": 95, "legend": 106, "class_nam": 106, "classif": [106, 124, 135, 146, 157, 198, 368], "construct": [107, 116, 127, 138, 149, 200, 215, 230, 245, 283, 304, 338], "transform": [107, 116, 122, 123, 127, 133, 134, 138, 144, 145, 149, 155, 156, 159, 170, 200, 215, 230, 245, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 292, 299, 300, 301, 302, 303, 328, 329, 330, 331, 332], "perform": [108, 117, 121, 128, 132, 139, 143, 150, 154, 203, 218, 233, 248, 289, 317, 324, 367], "load": [109, 118, 129, 140, 151, 204, 210, 219, 225, 234, 240, 249, 255, 360], "pre": [109, 118, 129, 140, 151, 204, 219, 234, 249, 259, 315], "train": [109, 118, 119, 123, 129, 130, 134, 140, 141, 145, 151, 152, 156, 159, 170, 181, 202, 204, 206, 207, 211, 217, 219, 221, 222, 226, 232, 234, 236, 237, 241, 247, 249, 251, 252, 256, 259, 286, 320, 342, 345, 348, 351, 361], "current": [110, 120, 131, 142, 153, 206, 211, 221, 226, 236, 241, 251, 256, 263, 317, 324, 361], "model_nam": 114, "model_param": [114, 115, 126, 137, 148, 198, 199, 214, 229, 244], "dict": [114, 115, 121, 124, 126, 132, 135, 137, 143, 146, 148, 154, 157, 162, 173, 187, 198, 199, 202, 208, 210, 211, 212, 214, 217, 223, 225, 226, 227, 229, 232, 238, 240, 241, 242, 244, 247, 253, 255, 256, 257, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 289, 290, 291, 292, 299, 300, 301, 302, 303, 305, 321, 324, 328, 329, 330, 331, 332, 340, 365], "lcc": [114, 125, 136, 147, 198, 213, 228, 243, 368], "classic": [114, 125, 136, 147], "ml": [114, 125, 136, 147], "build": [115, 126, 137, 148, 199, 214, 229, 244, 294], "initi": [115, 126, 137, 148, 182, 183, 184, 264], "checkpoint_path": [118, 129, 140, 151, 204, 219, 234, 249, 360], "checkpoint": [118, 120, 129, 131, 140, 142, 151, 153, 204, 206, 219, 221, 234, 236, 249, 251, 360, 361], "return_s": [119, 130, 141, 152], "preprocess": [119, 130, 141, 152], "infer": [119, 130, 141, 152, 170, 181, 207, 222, 237, 252], "origin": [119, 130, 141, 152, 165, 176, 190, 359], "relat": [120, 131, 142, 153], "inform": [120, 131, 142, 153, 287], "enable_cv": [121, 132, 143, 154], "cross_validate_param": [121, 132, 143, 154], "train_siz": [121, 132, 143, 154], "cross": [121, 132, 143, 154], "valid": [121, 132, 143, 154, 202, 210, 217, 225, 232, 240, 247, 255], "y_train": [123, 134, 145, 156], "updat": [123, 134, 145, 156, 211, 226, 241, 256, 324], "report": [124, 135, 146, 157], "cr": [159, 170], "re": [159, 170, 287], "exclud": [159, 170, 196, 341, 344, 347, 350], "all_path": [159, 170, 341, 344, 347, 350], "custom": [159, 287, 365], "raster": 159, "dl": 159, "avail": [160, 171, 185, 207, 222, 237, 252, 360], "properti": [161, 163, 172, 174, 186, 188, 333], "minx": [161, 172, 186], "maxx": [161, 172, 186], "mini": [161, 172, 186], "maxi": [161, 172, 186], "mint": [161, 166, 172, 177, 186, 191], "maxt": [161, 166, 172, 177, 186, 191], "system": [163, 174, 188], "new": [163, 174, 188, 289, 316], "y": [164, 175, 189, 365], "d": [164, 175, 189], "string": [164, 175, 189, 196, 287, 293, 295, 296, 336], "pars": [164, 175, 189, 196], "Not": [164, 175, 189], "filename_regex": [164, 175, 189], "group": [164, 166, 175, 177, 189, 191], "glob": [165, 176, 182, 183, 184, 190, 196, 341, 344, 347, 350], "express": [165, 166, 176, 177, 190, 191], "should": [165, 166, 176, 177, 190, 191, 283, 287, 294, 296, 304, 313, 314, 315, 316, 317, 320, 338], "enough": [165, 176, 190], "pick": [165, 176, 190], "up": [165, 176, 190, 208, 223, 238, 253, 261, 272, 352, 353, 368], "other": [165, 166, 176, 177, 190, 191, 294], "includ": [165, 176, 190, 264, 294, 313, 319, 324, 360, 361], "extens": [165, 176, 190], "mai": [165, 166, 176, 177, 190, 191, 286, 289, 294, 320], "differ": [165, 176, 190, 209, 224, 239, 254, 283, 304, 313, 322, 338, 353, 354, 355], "than": [165, 176, 190], "what": [165, 176, 190], "wa": [165, 176, 190], "regular": [166, 177, 191], "extract": [166, 177, 191, 362], "follow": [166, 177, 191, 306, 309, 314, 315, 316, 317, 356], "insert": [166, 177, 191], "when": [166, 177, 191, 294, 316, 317, 325], "separate_fil": [166, 177, 191], "find": [166, 177, 191], "replac": [166, 177, 191], "request": [166, 177, 191], "separ": [169, 180, 194], "els": [169, 180, 194], "filename_glob": [170, 181, 182, 183, 184, 196, 341, 344, 347, 350], "world": 170, "all_band": 181, "pattern": [182, 183, 184, 196, 212, 227, 242, 257, 341, 344, 347, 350], "match": [182, 183, 184, 196, 305, 367], "sensor_typ": [195, 259], "tile_per_load": 195, "24": 195, "input_s": 195, "224": [195, 362], "length": 195, "25000": 195, "batch_siz": 195, "64": 195, "get": [195, 202, 217, 232, 247], "pytorch": [195, 261, 272, 360, 361, 363], "esa2021": 195, "olitir": 195, "tile": [195, 365], "per": 195, "loader": 195, "certain": [196, 286, 327], "exclus": 196, "start": 196, "criteria": 196, "architectur": [198, 199, 214, 229, 244], "devic": [198, 199, 207, 209, 214, 222, 224, 229, 237, 239, 244, 252, 254, 283, 304, 322, 325, 326, 338, 360], "seed": [198, 363], "deep": [198, 199, 203, 210, 212, 213, 214, 218, 225, 227, 228, 229, 233, 240, 242, 243, 244, 248, 255, 257, 368], "learn": [198, 199, 203, 210, 212, 213, 214, 218, 225, 227, 228, 229, 233, 240, 242, 243, 244, 248, 255, 257, 360, 361, 368], "move": [199, 209, 214, 224, 229, 239, 244, 254, 282, 283, 304, 325, 326, 338], "select": [199, 214, 229, 244, 259, 341, 344, 347, 350], "denorm": [201, 216, 231, 246], "mode": [202, 217, 232, 247, 286, 327, 367], "val": [202, 217, 232, 247], "convert_numpi": [203, 218, 233, 248], "return_prob": [203, 218, 233, 248], "stride": [203, 218, 233, 248, 296, 362], "convert": [203, 218, 233, 248, 325, 335], "current_epoch": [206, 221, 236, 251], "epoch": [206, 211, 221, 226, 236, 241, 251, 256, 360, 361], "cuda": [207, 222, 237, 252, 313, 319, 325, 360], "cpu": [207, 222, 237, 252, 325], "loss_fn_param": [208, 223, 238, 253], "optimizer_param": [208, 223, 238, 253], "scheduler_param": [208, 223, 238, 253], "trainer": [208, 210, 223, 225, 238, 240, 253, 255], "loss": [208, 211, 223, 226, 238, 241, 253, 256], "optim": [208, 223, 238, 253, 283, 304, 311, 338, 339, 360, 361], "schedul": [208, 223, 238, 253, 360, 361], "dataloader_param": [210, 225, 240, 255], "trainer_param": [210, 225, 240, 255], "validate_param": [210, 225, 240, 255], "logger_param": [210, 225, 240, 255], "logger": [210, 225, 240, 255], "train_load": [211, 226, 241, 256], "dataload": [211, 226, 241, 256, 368], "max_epoch": [211, 226, 241, 256], "gradient_accumulation_factor": [211, 226, 241, 256], "one": [211, 226, 241, 256], "gradient": [211, 226, 241, 256, 316, 339], "accumul": [211, 226, 241, 256], "sampl": [211, 226, 241, 256], "count": [211, 226, 241, 256], "img_glob": [212, 227, 242, 257], "gt_glob": [212, 227, 242, 257], "drive": 259, "local": [259, 286, 320], "pretrained_model": 259, "appropri": 259, "nn": [259, 264, 295, 296, 306, 309, 325, 360, 361], "pred": 359, "original_s": 359, "mean": [340, 341, 343, 344, 346, 347, 349, 350, 359], "combin": 359, "complet": 359, "entir": 359, "overlap": 359, "_lrschedul": [360, 361], "state": [294, 313, 321, 324, 360, 361], "lr_schedul": [360, 361], "rate": [360, 361], "gpu": [283, 360, 363], "save_dir": 361, "dure": [342, 345, 348, 351, 361], "filepath": 361, "sub_siz": 362, "random": [322, 357, 363], "reproduc": [322, 363], "ensur": [294, 363], "determinist": [325, 363], "behavior": [286, 312, 313, 327, 363], "gener": [272, 289, 292, 322, 357, 363], "output_meta": 365, "blockxsiz": 365, "256": 365, "blockys": 365, "interleav": 365, "export": 365, "metadata": 365, "block": 365, "dimens": [365, 366], "open": [366, 367], "tif": [366, 367], "downsampl": [366, 367], "constant": 366, "both": [287, 307, 308, 309, 310, 317, 324, 366], "height": 366, "width": 366, "ref": 367, "anoth": [352, 367], "resampl": 367, "determin": 367, "desir": [325, 326, 336, 367], "export_geotiff": [], "open_at_scal": [], "open_at_s": [], "from_bound": [], "from_point": [], "get_partit": [], "basedownload": [], "download_imag": [], "get_spatial_filt": [], "merge_patch": [], "remove_cach": [], "set_root": [], "esaworldcov": [], "landsat_collection2": [], "apply_scale_factor": [], "mask_cloud": [], "retrieve_imag": [], "landsatmss": [], "landsattm": [], "landsatolitir": [], "confusion_matrix": [], "producer_accuraci": [], "user_accuraci": [], "cohen_kappa": [], "get_class_distribut": [], "plot_class_distribut": [], "show_esa_label": [], "plot_land_cov": [], "plot_landsat": [], "plot_chang": [], "visualize_data_batch": [], "model": 368, "construct_transform_map": [], "load_model": [], "save_model": [], "baselin": 368, "baselinelcc": [], "build_model": [], "transform_pipelin": [], "update_transform_map": [], "mssbaselin": [], "tmbaselin": [], "oli_tirsbaselin": [], "get_dataload": [], "parse_path": [], "customrasterdataset": [], "cmap": [], "date_format": [], "is_imag": [], "rgb_band": [], "deep_learn": 368, "deeplearninglcc": [], "denormalize_class": [], "get_metr": [], "normalize_class": [], "set_devic": [], "setup_train": [], "train_one_epoch": [], "mssdeeplearn": [], "tmdeeplearn": [], "olitirsdeeplearn": [], "download_model": [], "train_util": 368, "combine_predict": [], "load_checkpoint": [], "save_checkpoint": [], "segment_satelite_imag": [], "set_se": [], "index_a": [261, 352], "index_b": [261, 352], "built": [261, 272, 352, 353], "bui": [261, 272, 352], "alia": [262, 318], "typevar": 262, "autoattribut": 262, "add": [263, 313, 319], "child": [263, 280, 308], "access": [263, 313, 319], "ad": [263, 309, 312, 314, 315, 316, 317, 319, 324], "fn": 264, "callabl": [264, 312, 314, 315, 316], "t": [264, 278, 282, 283, 284, 286, 288, 297, 304, 314, 315, 320, 323, 326, 327, 336, 338], "recurs": [264, 279, 307, 310, 311], "everi": [264, 314, 315, 316], "submodul": [264, 279, 296, 307, 310, 311], "children": [264, 308], "self": [264, 278, 282, 283, 284, 286, 288, 289, 297, 304, 307, 310, 313, 320, 325, 326, 327, 336, 338], "typic": [264, 311, 313], "see": [264, 286, 293, 295, 296, 320, 323, 325, 327, 339], "also": [264, 283, 304, 324, 338], "init": 264, "doc": [264, 286, 320], "exampl": [264, 279, 296, 306, 307, 308, 309, 310, 311, 313, 324, 325], "no_grad": 264, "def": 264, "init_weight": 264, "print": [264, 279, 287, 306, 307, 308, 309, 310, 311], "linear": [264, 296, 306, 309, 325], "weight": [264, 324, 325], "fill_": 264, "net": [264, 306, 309], "sequenti": [264, 306, 309], "in_featur": [264, 296, 306, 309, 325], "out_featur": [264, 296, 306, 309, 325], "bia": [264, 296, 306, 309, 310, 324, 325], "requires_grad": [264, 320], "in_tensor": 265, "param": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 289, 292, 299, 300, 301, 302, 303, 310, 311, 319, 328, 329, 330, 331, 332], "process": [267, 269, 270, 271, 273, 275, 276, 277], "tag": [269, 275], "keypoint": [270, 276, 302, 331], "static": [272, 341, 344, 347, 350], "geometr": 272, "augment": 272, "cast": [278, 284, 288, 297, 325, 336], "buffer": [278, 282, 283, 284, 288, 293, 297, 304, 305, 307, 313, 324, 325, 326, 336, 338], "datatyp": [278, 284, 288, 297], "place": [278, 282, 283, 284, 288, 297, 304, 316, 320, 325, 336, 338], "iter": [279, 280, 306, 307, 308, 309, 310, 311], "yield": [279, 280, 306, 307, 308, 309, 310, 311], "direct": [279, 307, 310, 311], "member": [279, 307, 310, 311], "xdoctest": [279, 307, 308, 310, 311, 313, 324, 325], "skip": [279, 307, 308, 310, 311, 313, 324], "undefin": [279, 307, 308, 310, 311, 313, 324], "var": [279, 307, 308, 310, 311, 313, 324], "buf": [279, 307], "20l": [279, 311], "1l": [279, 311], "5l": [279, 311], "immedi": [280, 308], "make": [283, 304, 317, 338], "associ": [283, 304, 338], "object": [283, 294, 304, 324, 338], "so": [283, 296, 304, 338], "call": [283, 294, 296, 304, 312, 314, 315, 316, 317, 321, 325, 338], "befor": [283, 304, 315, 338], "live": [283, 304, 338], "while": [283, 304, 338], "being": [283, 304, 317, 324, 338], "copi": [283, 304, 305, 324, 326, 338], "evalu": [286, 327], "ha": [286, 296, 314, 327], "effect": [286, 314, 327], "document": [22, 286, 327, 369], "particular": [286, 327], "detail": [286, 293, 295, 327, 339], "thei": [286, 327], "affect": [286, 317, 327], "dropout": [286, 327], "batchnorm": [286, 313, 327], "etc": [286, 327], "equival": 286, "disabl": [286, 320], "grad": [286, 320, 339], "comparison": [286, 320], "sever": [286, 320], "similar": [286, 320, 325, 339], "mechan": [286, 320], "extra": [287, 294, 321], "To": [287, 296], "you": [287, 289, 294, 296, 321], "your": [287, 294, 321], "own": 287, "singl": [287, 315], "line": 287, "multi": 287, "accept": [287, 324, 325], "oper": [289, 313, 319, 320], "suit": 289, "pair": 289, "overrid": 289, "note": [289, 294, 305, 306, 309, 317, 322], "By": 289, "record": [289, 320], "_param": 289, "wish": 289, "save_kwarg": 289, "addition": 289, "batch_shap": [290, 291], "matric": 292, "throw": [293, 295, 296], "error": [293, 295, 296, 316, 317], "docstr": [293, 295], "get_submodul": [293, 295], "more": [293, 295, 339], "explan": [293, 295], "how": [293, 295, 296], "correctli": [293, 295], "fulli": [293, 295, 296], "qualifi": [293, 295, 296], "look": [293, 295, 296], "referenc": [293, 295, 296], "attributeerror": [293, 295, 296], "resolv": [293, 295, 296], "someth": [293, 295, 296], "state_dict": [294, 305, 313, 319, 321], "set_extra_st": 294, "need": [294, 317, 321], "pickleabl": 294, "work": 294, "serial": 294, "we": [294, 296, 315], "backward": [294, 312, 316], "compat": [294, 368], "guarante": 294, "break": 294, "pickl": 294, "form": 294, "For": [296, 313, 316], "let": 296, "sai": 296, "have": [296, 314, 315, 316, 317], "A": [296, 368], "like": 296, "net_b": 296, "net_c": 296, "conv": 296, "conv2d": 296, "16": 296, "33": [296, 343], "kernel_s": 296, "diagram": 296, "show": 296, "nest": 296, "itself": [296, 307, 308, 309, 310], "two": 296, "check": [296, 317, 337], "would": 296, "runtim": 296, "degre": 296, "queri": 296, "against": 296, "named_modul": 296, "achiev": 296, "same": [296, 324], "o": 296, "n": [296, 357], "transit": 296, "simpl": 296, "some": [296, 368], "alwai": 296, "abov": 296, "3x3": 298, "ident": 298, "strict": [305, 317], "its": [305, 316, 321], "descend": 305, "exactli": 305, "persist": [305, 313, 324], "strictli": 305, "enforc": [305, 324], "namedtupl": [305, 317], "missing_kei": [305, 317], "unexpected_kei": [305, 317], "miss": [305, 317], "unexpect": [305, 317], "regist": [305, 312, 313, 314, 315, 316, 317], "runtimeerror": 305, "network": [306, 309], "duplic": [306, 309], "onc": [306, 309], "In": [306, 309, 325], "l": [306, 309], "idx": [306, 309], "enumer": [306, 309], "prefix": [307, 309, 310, 324], "prepend": [307, 310], "running_var": 307, "conv4": 308, "conv5": 308, "memo": 309, "remove_dupl": 309, "alreadi": [309, 315], "hook": [312, 314, 315, 316, 317], "removablehandl": [312, 314, 315, 316, 317], "deprec": [312, 324], "favor": 312, "register_full_backward_hook": 312, "futur": [312, 324], "handl": [312, 314, 315, 316, 317, 321], "consid": 313, "running_mean": 313, "part": [313, 320], "alongsid": 313, "non": [313, 316, 325], "latter": 313, "run": [313, 317, 319, 324], "ignor": [313, 316, 319], "zero": [313, 339], "num_featur": 313, "forward": [314, 315, 316], "after": [314, 317], "signatur": [314, 315, 316, 317, 325], "won": [314, 315], "inplac": [314, 316, 317], "sinc": 314, "invok": 315, "wrap": 315, "unless": 315, "respect": [316, 325], "execut": 316, "grad_input": 316, "grad_output": 316, "subsequ": 316, "entri": 316, "technic": 316, "reason": 316, "receiv": 316, "view": 316, "similarli": 316, "caller": 316, "post": 317, "load_state_dict": [317, 321], "incompatible_kei": 317, "consist": 317, "modif": 317, "thrown": 317, "clearn": 317, "out": 317, "avoid": [317, 324], "add_modul": 318, "autograd": [320, 324], "help": 320, "freez": 320, "finetun": 320, "individu": 320, "gan": 320, "found": [321, 368], "get_extra_st": 321, "dtype": [322, 325, 336], "across": 322, "share_memory_": 323, "destin": 324, "keep_var": 324, "whole": 324, "averag": 324, "shallow": 324, "order": 324, "howev": 324, "releas": 324, "pleas": 324, "design": 324, "end": 324, "ordereddict": 324, "compos": 324, "detach": 324, "non_block": 325, "memory_format": 325, "channels_last": 325, "Its": 325, "complex": 325, "integr": 325, "unchang": 325, "tri": 325, "asynchron": 325, "host": 325, "possibl": 325, "pin": 325, "memori": 325, "below": 325, "whose": 325, "4d": 325, "ignore_w": 325, "1913": 325, "3420": 325, "5113": 325, "2325": 325, "doubl": 325, "float64": 325, "requir": 325, "env": 325, "torch_doctest_cuda1": 325, "gpu1": 325, "half": 325, "1914": 325, "5112": 325, "2324": 325, "float16": 325, "cdoubl": 325, "3741": 325, "j": 325, "2382": 325, "5593": 325, "4443": 325, "complex128": 325, "ones": 325, "6122": 325, "1150": 325, "without": 326, "storag": 326, "output_shap": 334, "standard": [334, 341, 344, 347, 350], "incom": 335, "h": [335, 357], "w": [335, 357], "c": [335, 357], "b": 335, "dst_type": 336, "set_to_non": 339, "context": 339, "instead": 339, "std": [340, 343, 346, 349], "ndbi_indic": 340, "ndvi_indic": 340, "bui_indic": 340, "preprocessor": [340, 343, 346, 349], "num_band": [341, 344, 347, 350], "deviat": [341, 344, 347, 350], "statist": [341, 344, 347, 350], "is_train": [342, 345, 348, 351], "p_hflip": [342, 345, 348, 351], "p_vflip": [342, 345, 348, 351], "p_mix_patch": [342, 345, 348, 351], "repeat": [342, 345, 348, 351], "horizont": [342, 345, 348, 351], "flip": [342, 345, 348, 351], "vertic": [342, 345, 348, 351], "mix": [342, 345, 348, 351, 356], "58": 343, "52628466445192": 343, "63": 343, "99713552734609": 343, "73": 343, "72406260655546": 343, "67": 343, "19410871327327": 343, "506525138881113": 343, "32": 343, "3602409954395": 343, "81779753120669": 343, "294028783169907": 343, "05244060772832586": 346, "06419783589372872": 346, "09355600224058667": 346, "09683895508641474": 346, "20228001018199623": 346, "17475386334671822": 346, "1299458739828": 346, "295": 346, "2477865092859": 346, "03056170518168943": 346, "034643695523177205": 346, "042781807483223834": 346, "05637172934273404": 346, "09086194854765857": 346, "08659663887712442": 346, "0762477946322169": 346, "49": 346, "351306701659716": 346, "08163042661356694": 349, "10085783731931074": 349, "10701118915780652": 349, "20055640287459503": 349, "1701256492465244": 349, "12407282351539259": 349, "291": 349, "8235398823627": 349, "05398084773803982": 349, "05849992704495288": 349, "06925856941611415": 349, "08748855275238117": 349, "08646376806562776": 349, "07575478301131": 349, "48": 349, "37941596949521": 349, "index_swir": 353, "index_nir": [353, 354, 355], "ndbi": 353, "shortwav": 353, "infrar": [353, 354, 355], "swir": 353, "Near": [353, 354, 355], "nir": [353, 354, 355], "index_r": 354, "veget": 354, "ndvi": 354, "red": 354, "index_green": 355, "water": 355, "ndwi": 355, "green": 355, "alpha": 356, "beta": [356, 357], "lam": 357, "lambda": 357, "bbx1": 357, "bby1": 357, "bbx2": 357, "bby2": 357, "pipeline_transform": 368, "compute_bui": [], "compute_ndbi": [], "compute_ndvi": [], "compute_ndwi": [], "mix_patch": [], "rand_bbox": [], "appendbui": [], "t_destin": [], "dump_patch": [], "transform_matrix": [], "apply_func": [], "apply_non_transform": [], "apply_non_transform_box": [], "apply_non_transform_class": [], "apply_non_transform_keypoint": [], "apply_non_transform_mask": [], "apply_transform": [], "apply_transform_box": [], "apply_transform_class": [], "apply_transform_keypoint": [], "apply_transform_mask": [], "bfloat16": [], "compute_transform": [], "eval": [], "extra_repr": [], "forward_paramet": [], "generate_paramet": [], "generate_transformation_matrix": [], "get_buff": [], "get_paramet": [], "identity_matrix": [], "inverse_box": [], "inverse_class": [], "inverse_input": [], "inverse_keypoint": [], "inverse_mask": [], "ipu": [], "named_buff": [], "named_children": [], "named_paramet": [], "register_backward_hook": [], "register_buff": [], "register_forward_hook": [], "register_forward_pre_hook": [], "register_load_state_dict_post_hook": [], "register_modul": [], "register_paramet": [], "requires_grad_": [], "set_rng_device_and_dtyp": [], "share_memori": [], "to_empti": [], "transform_box": [], "transform_class": [], "transform_input": [], "transform_keypoint": [], "transform_mask": [], "transform_output_tensor": [], "transform_tensor": [], "validate_tensor": [], "xpu": [], "zero_grad": [], "landsattransform": [], "calculate_statist": [], "msstransform": [], "tmtransform": [], "olitirstransform": [], "python": 368, "librari": 368, "featur": 368, "pretrain": 368, "further": 368, "tutori": 368, "research": 368, "practition": 368, "code": [], "bash": [], "pip": 368, "instal": 368, "git": 368, "sincostanx": 368, "link": 368, "worameth": 368, "chinchuthakun": 368, "maintain": 368, "global": 368, "urban": 368, "climat": 368, "studi": 368, "lab": 368, "tokyo": 368, "institut": 368, "technologi": 368, "quickstart": 368, "jupyt": 368, "notebook": 368, "here": 368}, "objects": {"": [[0, 0, 0, "-", "urbanlc"]], "urbanlc": [[1, 0, 0, "-", "analyze"], [6, 0, 0, "-", "downloader"], [13, 0, 0, "-", "model"], [364, 0, 0, "-", "utils"]], "urbanlc.analyze": [[2, 0, 0, "-", "constant"], [3, 0, 0, "-", "evaluate"], [23, 0, 0, "-", "metrics"], [30, 0, 0, "-", "visualizer"]], "urbanlc.analyze.metrics": [[24, 1, 1, "", "accuracy"], [25, 1, 1, "", "cohen_kappa"], [26, 1, 1, "", "confusion_matrix"], [27, 1, 1, "", "get_class_distribution"], [28, 1, 1, "", "producer_accuracy"], [29, 1, 1, "", "user_accuracy"]], "urbanlc.analyze.visualizer": [[31, 1, 1, "", "get_esa_colormap"], [32, 1, 1, "", "plot_change"], [33, 1, 1, "", "plot_class_distribution"], [34, 1, 1, "", "plot_land_cover"], [35, 1, 1, "", "plot_landsat"], [36, 1, 1, "", "show_esa_label"], [37, 1, 1, "", "visualize_data_batch"]], "urbanlc.downloader": [[38, 0, 0, "-", "base"], [8, 0, 0, "-", "downloader_constant"], [52, 0, 0, "-", "esa2021_downloader"], [10, 0, 0, "-", "general"], [61, 0, 0, "-", "landsat_downloader"], [12, 0, 0, "-", "logger"]], "urbanlc.downloader.base": [[39, 2, 1, "", "BaseDownloader"], [46, 2, 1, "", "BoundingBox"]], "urbanlc.downloader.base.BaseDownloader": [[40, 3, 1, "", "download_image"], [41, 3, 1, "", "download_images"], [42, 3, 1, "", "get_spatial_filter"], [43, 3, 1, "", "merge_patches"], [44, 3, 1, "", "remove_cache"], [45, 3, 1, "", "set_root"]], "urbanlc.downloader.base.BoundingBox": [[47, 4, 1, "", "bounds"], [48, 3, 1, "", "from_bounds"], [49, 3, 1, "", "from_point"], [50, 3, 1, "", "get_partition"], [51, 4, 1, "", "region"]], "urbanlc.downloader.esa2021_downloader": [[53, 2, 1, "", "ESAWorldCover"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover": [[54, 3, 1, "", "download_image"], [55, 3, 1, "", "download_images"], [56, 3, 1, "", "get_spatial_filter"], [57, 3, 1, "", "initialize"], [58, 3, 1, "", "merge_patches"], [59, 3, 1, "", "remove_cache"], [60, 3, 1, "", "set_root"]], "urbanlc.downloader.landsat_downloader": [[62, 2, 1, "", "LandsatMSS"], [73, 2, 1, "", "LandsatOLITIRS"], [84, 2, 1, "", "LandsatTM"], [95, 2, 1, "", "Landsat_Collection2"]], "urbanlc.downloader.landsat_downloader.LandsatMSS": [[63, 3, 1, "", "apply_scale_factors"], [64, 3, 1, "", "download_image"], [65, 3, 1, "", "download_images"], [66, 3, 1, "", "get_spatial_filter"], [67, 3, 1, "", "initialize"], [68, 3, 1, "", "mask_clouds"], [69, 3, 1, "", "merge_patches"], [70, 3, 1, "", "remove_cache"], [71, 3, 1, "", "retrieve_image"], [72, 3, 1, "", "set_root"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS": [[74, 3, 1, "", "apply_scale_factors"], [75, 3, 1, "", "download_image"], [76, 3, 1, "", "download_images"], [77, 3, 1, "", "get_spatial_filter"], [78, 3, 1, "", "initialize"], [79, 3, 1, "", "mask_clouds"], [80, 3, 1, "", "merge_patches"], [81, 3, 1, "", "remove_cache"], [82, 3, 1, "", "retrieve_image"], [83, 3, 1, "", "set_root"]], "urbanlc.downloader.landsat_downloader.LandsatTM": [[85, 3, 1, "", "apply_scale_factors"], [86, 3, 1, "", "download_image"], [87, 3, 1, "", "download_images"], [88, 3, 1, "", "get_spatial_filter"], [89, 3, 1, "", "initialize"], [90, 3, 1, "", "mask_clouds"], [91, 3, 1, "", "merge_patches"], [92, 3, 1, "", "remove_cache"], [93, 3, 1, "", "retrieve_image"], [94, 3, 1, "", "set_root"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2": [[96, 3, 1, "", "apply_scale_factors"], [97, 3, 1, "", "download_image"], [98, 3, 1, "", "download_images"], [99, 3, 1, "", "get_spatial_filter"], [100, 3, 1, "", "mask_clouds"], [101, 3, 1, "", "merge_patches"], [102, 3, 1, "", "remove_cache"], [103, 3, 1, "", "retrieve_image"], [104, 3, 1, "", "set_root"]], "urbanlc.model": [[105, 0, 0, "-", "base"], [113, 0, 0, "-", "baseline"], [158, 0, 0, "-", "dataloader"], [197, 0, 0, "-", "deep_learning"], [258, 0, 0, "-", "download"], [260, 0, 0, "-", "pipeline_transforms"], [358, 0, 0, "-", "train_utils"]], "urbanlc.model.base": [[106, 2, 1, "", "LCC"]], "urbanlc.model.base.LCC": [[107, 3, 1, "", "construct_transform_map"], [108, 3, 1, "", "infer"], [109, 3, 1, "", "load_model"], [110, 3, 1, "", "save_model"], [111, 3, 1, "", "train"], [112, 3, 1, "", "validate"]], "urbanlc.model.baseline": [[114, 2, 1, "", "BaselineLCC"], [125, 2, 1, "", "MSSBaseline"], [136, 2, 1, "", "OLI_TIRSBaseline"], [147, 2, 1, "", "TMBaseline"]], "urbanlc.model.baseline.BaselineLCC": [[115, 3, 1, "", "build_model"], [116, 3, 1, "", "construct_transform_map"], [117, 3, 1, "", "infer"], [118, 3, 1, "", "load_model"], [119, 3, 1, "", "retrieve_images"], [120, 3, 1, "", "save_model"], [121, 3, 1, "", "train"], [122, 3, 1, "", "transform_pipeline"], [123, 3, 1, "", "update_transform_map"], [124, 3, 1, "", "validate"]], "urbanlc.model.baseline.MSSBaseline": [[126, 3, 1, "", "build_model"], [127, 3, 1, "", "construct_transform_map"], [128, 3, 1, "", "infer"], [129, 3, 1, "", "load_model"], [130, 3, 1, "", "retrieve_images"], [131, 3, 1, "", "save_model"], [132, 3, 1, "", "train"], [133, 3, 1, "", "transform_pipeline"], [134, 3, 1, "", "update_transform_map"], [135, 3, 1, "", "validate"]], "urbanlc.model.baseline.OLI_TIRSBaseline": [[137, 3, 1, "", "build_model"], [138, 3, 1, "", "construct_transform_map"], [139, 3, 1, "", "infer"], [140, 3, 1, "", "load_model"], [141, 3, 1, "", "retrieve_images"], [142, 3, 1, "", "save_model"], [143, 3, 1, "", "train"], [144, 3, 1, "", "transform_pipeline"], [145, 3, 1, "", "update_transform_map"], [146, 3, 1, "", "validate"]], "urbanlc.model.baseline.TMBaseline": [[148, 3, 1, "", "build_model"], [149, 3, 1, "", "construct_transform_map"], [150, 3, 1, "", "infer"], [151, 3, 1, "", "load_model"], [152, 3, 1, "", "retrieve_images"], [153, 3, 1, "", "save_model"], [154, 3, 1, "", "train"], [155, 3, 1, "", "transform_pipeline"], [156, 3, 1, "", "update_transform_map"], [157, 3, 1, "", "validate"]], "urbanlc.model.dataloader": [[159, 2, 1, "", "CustomRasterDataset"], [170, 2, 1, "", "ESA2021"], [181, 2, 1, "", "Landsat"], [195, 1, 1, "", "get_dataloader"], [196, 1, 1, "", "parse_paths"]], "urbanlc.model.dataloader.CustomRasterDataset": [[160, 4, 1, "", "all_bands"], [161, 5, 1, "", "bounds"], [162, 4, 1, "", "cmap"], [163, 5, 1, "", "crs"], [164, 4, 1, "", "date_format"], [165, 4, 1, "", "filename_glob"], [166, 4, 1, "", "filename_regex"], [167, 4, 1, "", "is_image"], [168, 4, 1, "", "rgb_bands"], [169, 4, 1, "", "separate_files"]], "urbanlc.model.dataloader.ESA2021": [[171, 4, 1, "", "all_bands"], [172, 5, 1, "", "bounds"], [173, 4, 1, "", "cmap"], [174, 5, 1, "", "crs"], [175, 4, 1, "", "date_format"], [176, 4, 1, "", "filename_glob"], [177, 4, 1, "", "filename_regex"], [178, 4, 1, "", "is_image"], [179, 4, 1, "", "rgb_bands"], [180, 4, 1, "", "separate_files"]], "urbanlc.model.dataloader.Landsat": [[182, 3, 1, "", "MSS"], [183, 3, 1, "", "OLITIRS"], [184, 3, 1, "", "TM"], [185, 4, 1, "", "all_bands"], [186, 5, 1, "", "bounds"], [187, 4, 1, "", "cmap"], [188, 5, 1, "", "crs"], [189, 4, 1, "", "date_format"], [190, 4, 1, "", "filename_glob"], [191, 4, 1, "", "filename_regex"], [192, 4, 1, "", "is_image"], [193, 4, 1, "", "rgb_bands"], [194, 4, 1, "", "separate_files"]], "urbanlc.model.deep_learning": [[198, 2, 1, "", "DeepLearningLCC"], [213, 2, 1, "", "MSSDeepLearning"], [228, 2, 1, "", "OLITIRSDeepLearning"], [243, 2, 1, "", "TMDeepLearning"]], "urbanlc.model.deep_learning.DeepLearningLCC": [[199, 3, 1, "", "build_model"], [200, 3, 1, "", "construct_transform_map"], [201, 3, 1, "", "denormalize_class"], [202, 3, 1, "", "get_metrics"], [203, 3, 1, "", "infer"], [204, 3, 1, "", "load_model"], [205, 3, 1, "", "normalize_class"], [206, 3, 1, "", "save_model"], [207, 3, 1, "", "set_device"], [208, 3, 1, "", "setup_trainer"], [209, 3, 1, "", "to"], [210, 3, 1, "", "train"], [211, 3, 1, "", "train_one_epoch"], [212, 3, 1, "", "validate"]], "urbanlc.model.deep_learning.MSSDeepLearning": [[214, 3, 1, "", "build_model"], [215, 3, 1, "", "construct_transform_map"], [216, 3, 1, "", "denormalize_class"], [217, 3, 1, "", "get_metrics"], [218, 3, 1, "", "infer"], [219, 3, 1, "", "load_model"], [220, 3, 1, "", "normalize_class"], [221, 3, 1, "", "save_model"], [222, 3, 1, "", "set_device"], [223, 3, 1, "", "setup_trainer"], [224, 3, 1, "", "to"], [225, 3, 1, "", "train"], [226, 3, 1, "", "train_one_epoch"], [227, 3, 1, "", "validate"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning": [[229, 3, 1, "", "build_model"], [230, 3, 1, "", "construct_transform_map"], [231, 3, 1, "", "denormalize_class"], [232, 3, 1, "", "get_metrics"], [233, 3, 1, "", "infer"], [234, 3, 1, "", "load_model"], [235, 3, 1, "", "normalize_class"], [236, 3, 1, "", "save_model"], [237, 3, 1, "", "set_device"], [238, 3, 1, "", "setup_trainer"], [239, 3, 1, "", "to"], [240, 3, 1, "", "train"], [241, 3, 1, "", "train_one_epoch"], [242, 3, 1, "", "validate"]], "urbanlc.model.deep_learning.TMDeepLearning": [[244, 3, 1, "", "build_model"], [245, 3, 1, "", "construct_transform_map"], [246, 3, 1, "", "denormalize_class"], [247, 3, 1, "", "get_metrics"], [248, 3, 1, "", "infer"], [249, 3, 1, "", "load_model"], [250, 3, 1, "", "normalize_class"], [251, 3, 1, "", "save_model"], [252, 3, 1, "", "set_device"], [253, 3, 1, "", "setup_trainer"], [254, 3, 1, "", "to"], [255, 3, 1, "", "train"], [256, 3, 1, "", "train_one_epoch"], [257, 3, 1, "", "validate"]], "urbanlc.model.download": [[259, 1, 1, "", "download_model"]], "urbanlc.model.pipeline_transforms": [[261, 2, 1, "", "AppendBUI"], [340, 2, 1, "", "LandsatTransformer"], [343, 2, 1, "", "MSSTransformer"], [346, 2, 1, "", "OLITIRSTransformer"], [349, 2, 1, "", "TMTransformer"], [352, 1, 1, "", "compute_BUI"], [353, 1, 1, "", "compute_NDBI"], [354, 1, 1, "", "compute_NDVI"], [355, 1, 1, "", "compute_NDWI"], [356, 1, 1, "", "mix_patch"], [357, 1, 1, "", "rand_bbox"]], "urbanlc.model.pipeline_transforms.AppendBUI": [[262, 4, 1, "", "T_destination"], [263, 3, 1, "", "add_module"], [264, 3, 1, "", "apply"], [265, 3, 1, "", "apply_func"], [266, 3, 1, "", "apply_non_transform"], [267, 3, 1, "", "apply_non_transform_box"], [268, 3, 1, "", "apply_non_transform_boxes"], [269, 3, 1, "", "apply_non_transform_class"], [270, 3, 1, "", "apply_non_transform_keypoint"], [271, 3, 1, "", "apply_non_transform_mask"], [272, 3, 1, "", "apply_transform"], [273, 3, 1, "", "apply_transform_box"], [274, 3, 1, "", "apply_transform_boxes"], [275, 3, 1, "", "apply_transform_class"], [276, 3, 1, "", "apply_transform_keypoint"], [277, 3, 1, "", "apply_transform_mask"], [278, 3, 1, "", "bfloat16"], [279, 3, 1, "", "buffers"], [280, 3, 1, "", "children"], [281, 3, 1, "", "compute_transformation"], [282, 3, 1, "", "cpu"], [283, 3, 1, "", "cuda"], [284, 3, 1, "", "double"], [285, 4, 1, "", "dump_patches"], [286, 3, 1, "", "eval"], [287, 3, 1, "", "extra_repr"], [288, 3, 1, "", "float"], [289, 3, 1, "", "forward"], [290, 3, 1, "", "forward_parameters"], [291, 3, 1, "", "generate_parameters"], [292, 3, 1, "", "generate_transformation_matrix"], [293, 3, 1, "", "get_buffer"], [294, 3, 1, "", "get_extra_state"], [295, 3, 1, "", "get_parameter"], [296, 3, 1, "", "get_submodule"], [297, 3, 1, "", "half"], [298, 3, 1, "", "identity_matrix"], [299, 3, 1, "", "inverse_boxes"], [300, 3, 1, "", "inverse_classes"], [301, 3, 1, "", "inverse_inputs"], [302, 3, 1, "", "inverse_keypoints"], [303, 3, 1, "", "inverse_masks"], [304, 3, 1, "", "ipu"], [305, 3, 1, "", "load_state_dict"], [306, 3, 1, "", "modules"], [307, 3, 1, "", "named_buffers"], [308, 3, 1, "", "named_children"], [309, 3, 1, "", "named_modules"], [310, 3, 1, "", "named_parameters"], [311, 3, 1, "", "parameters"], [312, 3, 1, "", "register_backward_hook"], [313, 3, 1, "", "register_buffer"], [314, 3, 1, "", "register_forward_hook"], [315, 3, 1, "", "register_forward_pre_hook"], [316, 3, 1, "", "register_full_backward_hook"], [317, 3, 1, "", "register_load_state_dict_post_hook"], [318, 3, 1, "", "register_module"], [319, 3, 1, "", "register_parameter"], [320, 3, 1, "", "requires_grad_"], [321, 3, 1, "", "set_extra_state"], [322, 3, 1, "", "set_rng_device_and_dtype"], [323, 3, 1, "", "share_memory"], [324, 3, 1, "", "state_dict"], [325, 3, 1, "", "to"], [326, 3, 1, "", "to_empty"], [327, 3, 1, "", "train"], [328, 3, 1, "", "transform_boxes"], [329, 3, 1, "", "transform_classes"], [330, 3, 1, "", "transform_inputs"], [331, 3, 1, "", "transform_keypoints"], [332, 3, 1, "", "transform_masks"], [333, 5, 1, "", "transform_matrix"], [334, 3, 1, "", "transform_output_tensor"], [335, 3, 1, "", "transform_tensor"], [336, 3, 1, "", "type"], [337, 3, 1, "", "validate_tensor"], [338, 3, 1, "", "xpu"], [339, 3, 1, "", "zero_grad"]], "urbanlc.model.pipeline_transforms.LandsatTransformer": [[341, 3, 1, "", "calculate_statistics"], [342, 3, 1, "", "transform"]], "urbanlc.model.pipeline_transforms.MSSTransformer": [[344, 3, 1, "", "calculate_statistics"], [345, 3, 1, "", "transform"]], "urbanlc.model.pipeline_transforms.OLITIRSTransformer": [[347, 3, 1, "", "calculate_statistics"], [348, 3, 1, "", "transform"]], "urbanlc.model.pipeline_transforms.TMTransformer": [[350, 3, 1, "", "calculate_statistics"], [351, 3, 1, "", "transform"]], "urbanlc.model.train_utils": [[359, 1, 1, "", "combine_prediction"], [360, 1, 1, "", "load_checkpoint"], [361, 1, 1, "", "save_checkpoint"], [362, 1, 1, "", "segment_satelite_image"], [363, 1, 1, "", "set_seed"]], "urbanlc.utils": [[365, 1, 1, "", "export_geotiff"], [366, 1, 1, "", "open_at_scale"], [367, 1, 1, "", "open_at_size"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"api": 368, "urbanlc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "analyz": [1, 2, 3, 4, 5, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "metric": [4, 23, 24, 25, 26, 27, 28, 29], "visual": [5, 30, 31, 32, 33, 34, 35, 36, 37], "download": [6, 7, 8, 9, 10, 11, 12, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 258, 259], "base": [7, 14, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 105, 106, 107, 108, 109, 110, 111, 112], "esa2021_download": [9, 52, 53, 54, 55, 56, 57, 58, 59, 60], "landsat_download": [11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "util": [21, 364, 365, 366, 367], "welcom": [], "": [], "document": 368, "indic": [], "tabl": [], "content": [], "test": 370, "constant": 2, "evalu": 3, "downloader_const": 8, "gener": 10, "logger": 12, "model": [13, 14, 15, 16, 17, 18, 19, 20, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "baselin": [15, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157], "dataload": [16, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196], "deep_learn": [17, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], "pipeline_transform": [19, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357], "train_util": [20, 358, 359, 360, 361, 362, 363], "The": [], "refer": 368, "modul": 306, "accuraci": 24, "cohen_kappa": 25, "confusion_matrix": 26, "get_class_distribut": 27, "producer_accuraci": 28, "user_accuraci": 29, "get_esa_colormap": 31, "plot_chang": 32, "plot_class_distribut": 33, "plot_land_cov": 34, "plot_landsat": 35, "show_esa_label": 36, "visualize_data_batch": 37, "basedownload": [39, 40, 41, 42, 43, 44, 45], "download_imag": [40, 41, 54, 55, 64, 65, 75, 76, 86, 87, 97, 98], "get_spatial_filt": [42, 56, 66, 77, 88, 99], "merge_patch": [43, 58, 69, 80, 91, 101], "remove_cach": [44, 59, 70, 81, 92, 102], "set_root": [45, 60, 72, 83, 94, 104], "boundingbox": [46, 47, 48, 49, 50, 51], "bound": [47, 161, 172, 186], "from_bound": 48, "from_point": 49, "get_partit": 50, "region": 51, "esaworldcov": [53, 54, 55, 56, 57, 58, 59, 60], "initi": [57, 67, 78, 89], "landsatmss": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "apply_scale_factor": [63, 74, 85, 96], "mask_cloud": [68, 79, 90, 100], "retrieve_imag": [71, 82, 93, 103, 119, 130, 141, 152], "landsatolitir": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "landsattm": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "landsat_collection2": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "lcc": [106, 107, 108, 109, 110, 111, 112], "construct_transform_map": [107, 116, 127, 138, 149, 200, 215, 230, 245], "infer": [108, 117, 128, 139, 150, 203, 218, 233, 248], "load_model": [109, 118, 129, 140, 151, 204, 219, 234, 249], "save_model": [110, 120, 131, 142, 153, 206, 221, 236, 251], "train": [111, 121, 132, 143, 154, 210, 225, 240, 255, 327], "valid": [112, 124, 135, 146, 157, 212, 227, 242, 257], "baselinelcc": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124], "build_model": [115, 126, 137, 148, 199, 214, 229, 244], "transform_pipelin": [122, 133, 144, 155], "update_transform_map": [123, 134, 145, 156], "mssbaselin": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "oli_tirsbaselin": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "tmbaselin": [147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157], "customrasterdataset": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "all_band": [160, 171, 185], "cmap": [162, 173, 187], "cr": [163, 174, 188], "date_format": [164, 175, 189], "filename_glob": [165, 176, 190], "filename_regex": [166, 177, 191], "is_imag": [167, 178, 192], "rgb_band": [168, 179, 193], "separate_fil": [169, 180, 194], "esa2021": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "landsat": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194], "mss": 182, "olitir": 183, "tm": 184, "get_dataload": 195, "parse_path": 196, "deeplearninglcc": [198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "denormalize_class": [201, 216, 231, 246], "get_metr": [202, 217, 232, 247], "normalize_class": [205, 220, 235, 250], "set_devic": [207, 222, 237, 252], "setup_train": [208, 223, 238, 253], "train_one_epoch": [211, 226, 241, 256], "mssdeeplearn": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], "olitirsdeeplearn": [228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242], "tmdeeplearn": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257], "download_model": 259, "combine_predict": 359, "load_checkpoint": 360, "save_checkpoint": 361, "segment_satelite_imag": 362, "set_se": 363, "export_geotiff": 365, "open_at_scal": 366, "open_at_s": 367, "appendbui": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "t_destin": 262, "add_modul": 263, "appli": 264, "apply_func": 265, "apply_non_transform": 266, "apply_non_transform_box": [267, 268], "apply_non_transform_class": 269, "apply_non_transform_keypoint": 270, "apply_non_transform_mask": 271, "apply_transform": 272, "apply_transform_box": [273, 274], "apply_transform_class": 275, "apply_transform_keypoint": 276, "apply_transform_mask": 277, "bfloat16": 278, "buffer": 279, "children": 280, "compute_transform": 281, "cpu": 282, "cuda": 283, "doubl": 284, "dump_patch": 285, "eval": 286, "extra_repr": 287, "float": 288, "forward": 289, "forward_paramet": 290, "generate_paramet": 291, "generate_transformation_matrix": 292, "get_buff": 293, "get_extra_st": 294, "get_paramet": 295, "get_submodul": 296, "half": 297, "identity_matrix": 298, "inverse_box": 299, "inverse_class": 300, "inverse_input": 301, "inverse_keypoint": 302, "inverse_mask": 303, "ipu": 304, "load_state_dict": 305, "named_buff": 307, "named_children": 308, "named_modul": 309, "named_paramet": 310, "paramet": 311, "register_backward_hook": 312, "register_buff": 313, "register_forward_hook": 314, "register_forward_pre_hook": 315, "register_full_backward_hook": 316, "register_load_state_dict_post_hook": 317, "register_modul": 318, "register_paramet": 319, "requires_grad_": 320, "set_extra_st": 321, "set_rng_device_and_dtyp": 322, "share_memori": 323, "state_dict": 324, "to_empti": 326, "transform_box": 328, "transform_class": 329, "transform_input": 330, "transform_keypoint": 331, "transform_mask": 332, "transform_matrix": 333, "transform_output_tensor": 334, "transform_tensor": 335, "type": 336, "validate_tensor": 337, "xpu": 338, "zero_grad": 339, "landsattransform": [340, 341, 342], "calculate_statist": [341, 344, 347, 350], "transform": [342, 345, 348, 351], "msstransform": [343, 344, 345], "olitirstransform": [346, 347, 348], "tmtransform": [349, 350, 351], "compute_bui": 352, "compute_ndbi": 353, "compute_ndvi": 354, "compute_ndwi": 355, "mix_patch": 356, "rand_bbox": 357}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"urbanlc": [[0, "module-urbanlc"]], "urbanlc.analyze": [[1, "module-urbanlc.analyze"]], "urbanlc.analyze.constant": [[2, "module-urbanlc.analyze.constant"]], "urbanlc.analyze.visualizer": [[5, "module-urbanlc.analyze.visualizer"], [30, "module-urbanlc.analyze.visualizer"]], "urbanlc.downloader": [[6, "module-urbanlc.downloader"]], "urbanlc.downloader.base": [[7, "module-urbanlc.downloader.base"], [38, "module-urbanlc.downloader.base"]], "urbanlc.downloader.downloader_constant": [[8, "module-urbanlc.downloader.downloader_constant"]], "urbanlc.downloader.esa2021_downloader": [[9, "module-urbanlc.downloader.esa2021_downloader"], [52, "module-urbanlc.downloader.esa2021_downloader"]], "urbanlc.downloader.general": [[10, "module-urbanlc.downloader.general"]], "urbanlc.downloader.landsat_downloader": [[11, "module-urbanlc.downloader.landsat_downloader"], [61, "module-urbanlc.downloader.landsat_downloader"]], "urbanlc.downloader.logger": [[12, "module-urbanlc.downloader.logger"]], "urbanlc.model": [[13, "module-urbanlc.model"]], "urbanlc.model.base": [[14, "module-urbanlc.model.base"], [105, "module-urbanlc.model.base"]], "urbanlc.model.baseline": [[15, "module-urbanlc.model.baseline"], [113, "module-urbanlc.model.baseline"]], "urbanlc.model.download": [[18, "module-urbanlc.model.download"], [258, "module-urbanlc.model.download"]], "urbanlc.model.train_utils": [[20, "module-urbanlc.model.train_utils"], [358, "module-urbanlc.model.train_utils"]], "urbanlc.utils": [[21, "module-urbanlc.utils"], [364, "module-urbanlc.utils"]], "urbanlc.analyze.visualizer.get_esa_colormap": [[31, "urbanlc-analyze-visualizer-get-esa-colormap"]], "urbanlc.analyze.visualizer.plot_change": [[32, "urbanlc-analyze-visualizer-plot-change"]], "urbanlc.analyze.visualizer.plot_class_distribution": [[33, "urbanlc-analyze-visualizer-plot-class-distribution"]], "urbanlc.analyze.visualizer.plot_land_cover": [[34, "urbanlc-analyze-visualizer-plot-land-cover"]], "urbanlc.analyze.visualizer.plot_landsat": [[35, "urbanlc-analyze-visualizer-plot-landsat"]], "urbanlc.analyze.visualizer.show_esa_label": [[36, "urbanlc-analyze-visualizer-show-esa-label"]], "urbanlc.analyze.visualizer.visualize_data_batch": [[37, "urbanlc-analyze-visualizer-visualize-data-batch"]], "urbanlc.downloader.base.BaseDownloader": [[39, "urbanlc-downloader-base-basedownloader"]], "urbanlc.downloader.base.BaseDownloader.download_image": [[40, "urbanlc-downloader-base-basedownloader-download-image"]], "urbanlc.downloader.base.BaseDownloader.download_images": [[41, "urbanlc-downloader-base-basedownloader-download-images"]], "urbanlc.downloader.base.BaseDownloader.get_spatial_filter": [[42, "urbanlc-downloader-base-basedownloader-get-spatial-filter"]], "urbanlc.downloader.base.BaseDownloader.merge_patches": [[43, "urbanlc-downloader-base-basedownloader-merge-patches"]], "urbanlc.downloader.base.BaseDownloader.remove_cache": [[44, "urbanlc-downloader-base-basedownloader-remove-cache"]], "urbanlc.downloader.base.BaseDownloader.set_root": [[45, "urbanlc-downloader-base-basedownloader-set-root"]], "urbanlc.downloader.base.BoundingBox": [[46, "urbanlc-downloader-base-boundingbox"]], "urbanlc.downloader.base.BoundingBox.bounds": [[47, "urbanlc-downloader-base-boundingbox-bounds"]], "urbanlc.downloader.base.BoundingBox.from_bounds": [[48, "urbanlc-downloader-base-boundingbox-from-bounds"]], "urbanlc.downloader.base.BoundingBox.from_point": [[49, "urbanlc-downloader-base-boundingbox-from-point"]], "urbanlc.downloader.base.BoundingBox.get_partition": [[50, "urbanlc-downloader-base-boundingbox-get-partition"]], "urbanlc.downloader.base.BoundingBox.region": [[51, "urbanlc-downloader-base-boundingbox-region"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover": [[53, "urbanlc-downloader-esa2021-downloader-esaworldcover"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_image": [[54, "urbanlc-downloader-esa2021-downloader-esaworldcover-download-image"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.download_images": [[55, "urbanlc-downloader-esa2021-downloader-esaworldcover-download-images"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.get_spatial_filter": [[56, "urbanlc-downloader-esa2021-downloader-esaworldcover-get-spatial-filter"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.initialize": [[57, "urbanlc-downloader-esa2021-downloader-esaworldcover-initialize"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.merge_patches": [[58, "urbanlc-downloader-esa2021-downloader-esaworldcover-merge-patches"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.remove_cache": [[59, "urbanlc-downloader-esa2021-downloader-esaworldcover-remove-cache"]], "urbanlc.downloader.esa2021_downloader.ESAWorldCover.set_root": [[60, "urbanlc-downloader-esa2021-downloader-esaworldcover-set-root"]], "urbanlc.downloader.landsat_downloader.LandsatMSS": [[62, "urbanlc-downloader-landsat-downloader-landsatmss"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.apply_scale_factors": [[63, "urbanlc-downloader-landsat-downloader-landsatmss-apply-scale-factors"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.download_image": [[64, "urbanlc-downloader-landsat-downloader-landsatmss-download-image"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.download_images": [[65, "urbanlc-downloader-landsat-downloader-landsatmss-download-images"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.get_spatial_filter": [[66, "urbanlc-downloader-landsat-downloader-landsatmss-get-spatial-filter"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.initialize": [[67, "urbanlc-downloader-landsat-downloader-landsatmss-initialize"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.mask_clouds": [[68, "urbanlc-downloader-landsat-downloader-landsatmss-mask-clouds"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.merge_patches": [[69, "urbanlc-downloader-landsat-downloader-landsatmss-merge-patches"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.remove_cache": [[70, "urbanlc-downloader-landsat-downloader-landsatmss-remove-cache"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.retrieve_image": [[71, "urbanlc-downloader-landsat-downloader-landsatmss-retrieve-image"]], "urbanlc.downloader.landsat_downloader.LandsatMSS.set_root": [[72, "urbanlc-downloader-landsat-downloader-landsatmss-set-root"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS": [[73, "urbanlc-downloader-landsat-downloader-landsatolitirs"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.apply_scale_factors": [[74, "urbanlc-downloader-landsat-downloader-landsatolitirs-apply-scale-factors"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_image": [[75, "urbanlc-downloader-landsat-downloader-landsatolitirs-download-image"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.download_images": [[76, "urbanlc-downloader-landsat-downloader-landsatolitirs-download-images"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.get_spatial_filter": [[77, "urbanlc-downloader-landsat-downloader-landsatolitirs-get-spatial-filter"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.initialize": [[78, "urbanlc-downloader-landsat-downloader-landsatolitirs-initialize"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.mask_clouds": [[79, "urbanlc-downloader-landsat-downloader-landsatolitirs-mask-clouds"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.merge_patches": [[80, "urbanlc-downloader-landsat-downloader-landsatolitirs-merge-patches"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.remove_cache": [[81, "urbanlc-downloader-landsat-downloader-landsatolitirs-remove-cache"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.retrieve_image": [[82, "urbanlc-downloader-landsat-downloader-landsatolitirs-retrieve-image"]], "urbanlc.downloader.landsat_downloader.LandsatOLITIRS.set_root": [[83, "urbanlc-downloader-landsat-downloader-landsatolitirs-set-root"]], "urbanlc.downloader.landsat_downloader.LandsatTM": [[84, "urbanlc-downloader-landsat-downloader-landsattm"]], "urbanlc.downloader.landsat_downloader.LandsatTM.apply_scale_factors": [[85, "urbanlc-downloader-landsat-downloader-landsattm-apply-scale-factors"]], "urbanlc.downloader.landsat_downloader.LandsatTM.download_image": [[86, "urbanlc-downloader-landsat-downloader-landsattm-download-image"]], "urbanlc.downloader.landsat_downloader.LandsatTM.download_images": [[87, "urbanlc-downloader-landsat-downloader-landsattm-download-images"]], "urbanlc.downloader.landsat_downloader.LandsatTM.get_spatial_filter": [[88, "urbanlc-downloader-landsat-downloader-landsattm-get-spatial-filter"]], "urbanlc.downloader.landsat_downloader.LandsatTM.initialize": [[89, "urbanlc-downloader-landsat-downloader-landsattm-initialize"]], "urbanlc.downloader.landsat_downloader.LandsatTM.mask_clouds": [[90, "urbanlc-downloader-landsat-downloader-landsattm-mask-clouds"]], "urbanlc.downloader.landsat_downloader.LandsatTM.merge_patches": [[91, "urbanlc-downloader-landsat-downloader-landsattm-merge-patches"]], "urbanlc.downloader.landsat_downloader.LandsatTM.remove_cache": [[92, "urbanlc-downloader-landsat-downloader-landsattm-remove-cache"]], "urbanlc.downloader.landsat_downloader.LandsatTM.retrieve_image": [[93, "urbanlc-downloader-landsat-downloader-landsattm-retrieve-image"]], "urbanlc.downloader.landsat_downloader.LandsatTM.set_root": [[94, "urbanlc-downloader-landsat-downloader-landsattm-set-root"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2": [[95, "urbanlc-downloader-landsat-downloader-landsat-collection2"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.apply_scale_factors": [[96, "urbanlc-downloader-landsat-downloader-landsat-collection2-apply-scale-factors"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_image": [[97, "urbanlc-downloader-landsat-downloader-landsat-collection2-download-image"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.download_images": [[98, "urbanlc-downloader-landsat-downloader-landsat-collection2-download-images"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.get_spatial_filter": [[99, "urbanlc-downloader-landsat-downloader-landsat-collection2-get-spatial-filter"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.mask_clouds": [[100, "urbanlc-downloader-landsat-downloader-landsat-collection2-mask-clouds"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.merge_patches": [[101, "urbanlc-downloader-landsat-downloader-landsat-collection2-merge-patches"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.remove_cache": [[102, "urbanlc-downloader-landsat-downloader-landsat-collection2-remove-cache"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.retrieve_image": [[103, "urbanlc-downloader-landsat-downloader-landsat-collection2-retrieve-image"]], "urbanlc.downloader.landsat_downloader.Landsat_Collection2.set_root": [[104, "urbanlc-downloader-landsat-downloader-landsat-collection2-set-root"]], "urbanlc.model.base.LCC": [[106, "urbanlc-model-base-lcc"]], "urbanlc.model.base.LCC.construct_transform_map": [[107, "urbanlc-model-base-lcc-construct-transform-map"]], "urbanlc.model.base.LCC.infer": [[108, "urbanlc-model-base-lcc-infer"]], "urbanlc.model.base.LCC.load_model": [[109, "urbanlc-model-base-lcc-load-model"]], "urbanlc.model.base.LCC.save_model": [[110, "urbanlc-model-base-lcc-save-model"]], "urbanlc.model.base.LCC.train": [[111, "urbanlc-model-base-lcc-train"]], "urbanlc.model.base.LCC.validate": [[112, "urbanlc-model-base-lcc-validate"]], "urbanlc.model.baseline.BaselineLCC": [[114, "urbanlc-model-baseline-baselinelcc"]], "urbanlc.model.baseline.BaselineLCC.build_model": [[115, "urbanlc-model-baseline-baselinelcc-build-model"]], "urbanlc.model.baseline.BaselineLCC.construct_transform_map": [[116, "urbanlc-model-baseline-baselinelcc-construct-transform-map"]], "urbanlc.model.baseline.BaselineLCC.infer": [[117, "urbanlc-model-baseline-baselinelcc-infer"]], "urbanlc.model.baseline.BaselineLCC.load_model": [[118, "urbanlc-model-baseline-baselinelcc-load-model"]], "urbanlc.model.baseline.BaselineLCC.retrieve_images": [[119, "urbanlc-model-baseline-baselinelcc-retrieve-images"]], "urbanlc.model.baseline.BaselineLCC.save_model": [[120, "urbanlc-model-baseline-baselinelcc-save-model"]], "urbanlc.model.baseline.BaselineLCC.train": [[121, "urbanlc-model-baseline-baselinelcc-train"]], "urbanlc.model.baseline.BaselineLCC.transform_pipeline": [[122, "urbanlc-model-baseline-baselinelcc-transform-pipeline"]], "urbanlc.model.baseline.BaselineLCC.update_transform_map": [[123, "urbanlc-model-baseline-baselinelcc-update-transform-map"]], "urbanlc.model.baseline.BaselineLCC.validate": [[124, "urbanlc-model-baseline-baselinelcc-validate"]], "urbanlc.model.baseline.MSSBaseline": [[125, "urbanlc-model-baseline-mssbaseline"]], "urbanlc.model.baseline.MSSBaseline.build_model": [[126, "urbanlc-model-baseline-mssbaseline-build-model"]], "urbanlc.model.baseline.MSSBaseline.construct_transform_map": [[127, "urbanlc-model-baseline-mssbaseline-construct-transform-map"]], "urbanlc.model.baseline.MSSBaseline.infer": [[128, "urbanlc-model-baseline-mssbaseline-infer"]], "urbanlc.model.baseline.MSSBaseline.load_model": [[129, "urbanlc-model-baseline-mssbaseline-load-model"]], "urbanlc.model.baseline.MSSBaseline.retrieve_images": [[130, "urbanlc-model-baseline-mssbaseline-retrieve-images"]], "urbanlc.model.baseline.MSSBaseline.save_model": [[131, "urbanlc-model-baseline-mssbaseline-save-model"]], "urbanlc.model.baseline.MSSBaseline.train": [[132, "urbanlc-model-baseline-mssbaseline-train"]], "urbanlc.model.baseline.MSSBaseline.transform_pipeline": [[133, "urbanlc-model-baseline-mssbaseline-transform-pipeline"]], "urbanlc.model.baseline.MSSBaseline.update_transform_map": [[134, "urbanlc-model-baseline-mssbaseline-update-transform-map"]], "urbanlc.model.baseline.MSSBaseline.validate": [[135, "urbanlc-model-baseline-mssbaseline-validate"]], "urbanlc.model.baseline.OLI_TIRSBaseline": [[136, "urbanlc-model-baseline-oli-tirsbaseline"]], "urbanlc.model.baseline.OLI_TIRSBaseline.build_model": [[137, "urbanlc-model-baseline-oli-tirsbaseline-build-model"]], "urbanlc.model.baseline.OLI_TIRSBaseline.construct_transform_map": [[138, "urbanlc-model-baseline-oli-tirsbaseline-construct-transform-map"]], "urbanlc.model.baseline.OLI_TIRSBaseline.infer": [[139, "urbanlc-model-baseline-oli-tirsbaseline-infer"]], "urbanlc.model.baseline.OLI_TIRSBaseline.load_model": [[140, "urbanlc-model-baseline-oli-tirsbaseline-load-model"]], "urbanlc.model.baseline.OLI_TIRSBaseline.retrieve_images": [[141, "urbanlc-model-baseline-oli-tirsbaseline-retrieve-images"]], "urbanlc.model.baseline.OLI_TIRSBaseline.save_model": [[142, "urbanlc-model-baseline-oli-tirsbaseline-save-model"]], "urbanlc.model.baseline.OLI_TIRSBaseline.train": [[143, "urbanlc-model-baseline-oli-tirsbaseline-train"]], "urbanlc.model.baseline.OLI_TIRSBaseline.transform_pipeline": [[144, "urbanlc-model-baseline-oli-tirsbaseline-transform-pipeline"]], "urbanlc.model.baseline.OLI_TIRSBaseline.update_transform_map": [[145, "urbanlc-model-baseline-oli-tirsbaseline-update-transform-map"]], "urbanlc.model.baseline.OLI_TIRSBaseline.validate": [[146, "urbanlc-model-baseline-oli-tirsbaseline-validate"]], "urbanlc.model.baseline.TMBaseline": [[147, "urbanlc-model-baseline-tmbaseline"]], "urbanlc.model.baseline.TMBaseline.build_model": [[148, "urbanlc-model-baseline-tmbaseline-build-model"]], "urbanlc.model.baseline.TMBaseline.construct_transform_map": [[149, "urbanlc-model-baseline-tmbaseline-construct-transform-map"]], "urbanlc.model.baseline.TMBaseline.infer": [[150, "urbanlc-model-baseline-tmbaseline-infer"]], "urbanlc.model.baseline.TMBaseline.load_model": [[151, "urbanlc-model-baseline-tmbaseline-load-model"]], "urbanlc.model.baseline.TMBaseline.retrieve_images": [[152, "urbanlc-model-baseline-tmbaseline-retrieve-images"]], "urbanlc.model.baseline.TMBaseline.save_model": [[153, "urbanlc-model-baseline-tmbaseline-save-model"]], "urbanlc.model.baseline.TMBaseline.train": [[154, "urbanlc-model-baseline-tmbaseline-train"]], "urbanlc.model.baseline.TMBaseline.transform_pipeline": [[155, "urbanlc-model-baseline-tmbaseline-transform-pipeline"]], "urbanlc.model.baseline.TMBaseline.update_transform_map": [[156, "urbanlc-model-baseline-tmbaseline-update-transform-map"]], "urbanlc.model.baseline.TMBaseline.validate": [[157, "urbanlc-model-baseline-tmbaseline-validate"]], "urbanlc.model.deep_learning.DeepLearningLCC.construct_transform_map": [[200, "urbanlc-model-deep-learning-deeplearninglcc-construct-transform-map"]], "urbanlc.model.deep_learning.MSSDeepLearning.construct_transform_map": [[215, "urbanlc-model-deep-learning-mssdeeplearning-construct-transform-map"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.construct_transform_map": [[230, "urbanlc-model-deep-learning-olitirsdeeplearning-construct-transform-map"]], "urbanlc.model.deep_learning.TMDeepLearning.construct_transform_map": [[245, "urbanlc-model-deep-learning-tmdeeplearning-construct-transform-map"]], "urbanlc.model.download.download_model": [[259, "urbanlc-model-download-download-model"]], "urbanlc.model.pipeline_transforms.AppendBUI.add_module": [[263, "urbanlc-model-pipeline-transforms-appendbui-add-module"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply": [[264, "urbanlc-model-pipeline-transforms-appendbui-apply"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_func": [[265, "urbanlc-model-pipeline-transforms-appendbui-apply-func"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform": [[266, "urbanlc-model-pipeline-transforms-appendbui-apply-non-transform"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_box": [[267, "urbanlc-model-pipeline-transforms-appendbui-apply-non-transform-box"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_boxes": [[268, "urbanlc-model-pipeline-transforms-appendbui-apply-non-transform-boxes"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_class": [[269, "urbanlc-model-pipeline-transforms-appendbui-apply-non-transform-class"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_keypoint": [[270, "urbanlc-model-pipeline-transforms-appendbui-apply-non-transform-keypoint"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_non_transform_mask": [[271, "urbanlc-model-pipeline-transforms-appendbui-apply-non-transform-mask"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_box": [[273, "urbanlc-model-pipeline-transforms-appendbui-apply-transform-box"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_boxes": [[274, "urbanlc-model-pipeline-transforms-appendbui-apply-transform-boxes"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_class": [[275, "urbanlc-model-pipeline-transforms-appendbui-apply-transform-class"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_keypoint": [[276, "urbanlc-model-pipeline-transforms-appendbui-apply-transform-keypoint"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform_mask": [[277, "urbanlc-model-pipeline-transforms-appendbui-apply-transform-mask"]], "urbanlc.model.pipeline_transforms.AppendBUI.bfloat16": [[278, "urbanlc-model-pipeline-transforms-appendbui-bfloat16"]], "urbanlc.model.pipeline_transforms.AppendBUI.buffers": [[279, "urbanlc-model-pipeline-transforms-appendbui-buffers"]], "urbanlc.model.pipeline_transforms.AppendBUI.children": [[280, "urbanlc-model-pipeline-transforms-appendbui-children"]], "urbanlc.model.pipeline_transforms.AppendBUI.compute_transformation": [[281, "urbanlc-model-pipeline-transforms-appendbui-compute-transformation"]], "urbanlc.model.pipeline_transforms.AppendBUI.cpu": [[282, "urbanlc-model-pipeline-transforms-appendbui-cpu"]], "urbanlc.model.pipeline_transforms.AppendBUI.cuda": [[283, "urbanlc-model-pipeline-transforms-appendbui-cuda"]], "urbanlc.model.pipeline_transforms.AppendBUI.double": [[284, "urbanlc-model-pipeline-transforms-appendbui-double"]], "urbanlc.model.pipeline_transforms.AppendBUI.eval": [[286, "urbanlc-model-pipeline-transforms-appendbui-eval"]], "urbanlc.model.pipeline_transforms.AppendBUI.extra_repr": [[287, "urbanlc-model-pipeline-transforms-appendbui-extra-repr"]], "urbanlc.model.pipeline_transforms.AppendBUI.float": [[288, "urbanlc-model-pipeline-transforms-appendbui-float"]], "urbanlc.model.pipeline_transforms.AppendBUI.forward": [[289, "urbanlc-model-pipeline-transforms-appendbui-forward"]], "urbanlc.model.pipeline_transforms.AppendBUI.forward_parameters": [[290, "urbanlc-model-pipeline-transforms-appendbui-forward-parameters"]], "urbanlc.model.pipeline_transforms.AppendBUI.generate_parameters": [[291, "urbanlc-model-pipeline-transforms-appendbui-generate-parameters"]], "urbanlc.model.pipeline_transforms.AppendBUI.generate_transformation_matrix": [[292, "urbanlc-model-pipeline-transforms-appendbui-generate-transformation-matrix"]], "urbanlc.model.pipeline_transforms.AppendBUI.get_buffer": [[293, "urbanlc-model-pipeline-transforms-appendbui-get-buffer"]], "urbanlc.model.pipeline_transforms.AppendBUI.get_extra_state": [[294, "urbanlc-model-pipeline-transforms-appendbui-get-extra-state"]], "urbanlc.model.pipeline_transforms.AppendBUI.get_parameter": [[295, "urbanlc-model-pipeline-transforms-appendbui-get-parameter"]], "urbanlc.model.pipeline_transforms.AppendBUI.get_submodule": [[296, "urbanlc-model-pipeline-transforms-appendbui-get-submodule"]], "urbanlc.model.pipeline_transforms.AppendBUI.half": [[297, "urbanlc-model-pipeline-transforms-appendbui-half"]], "urbanlc.model.pipeline_transforms.AppendBUI.identity_matrix": [[298, "urbanlc-model-pipeline-transforms-appendbui-identity-matrix"]], "urbanlc.model.pipeline_transforms.AppendBUI.inverse_boxes": [[299, "urbanlc-model-pipeline-transforms-appendbui-inverse-boxes"]], "urbanlc.model.pipeline_transforms.AppendBUI.inverse_classes": [[300, "urbanlc-model-pipeline-transforms-appendbui-inverse-classes"]], "urbanlc.model.pipeline_transforms.AppendBUI.inverse_inputs": [[301, "urbanlc-model-pipeline-transforms-appendbui-inverse-inputs"]], "urbanlc.model.pipeline_transforms.AppendBUI.inverse_keypoints": [[302, "urbanlc-model-pipeline-transforms-appendbui-inverse-keypoints"]], "urbanlc.model.pipeline_transforms.AppendBUI.inverse_masks": [[303, "urbanlc-model-pipeline-transforms-appendbui-inverse-masks"]], "urbanlc.model.pipeline_transforms.AppendBUI.ipu": [[304, "urbanlc-model-pipeline-transforms-appendbui-ipu"]], "urbanlc.model.pipeline_transforms.AppendBUI.load_state_dict": [[305, "urbanlc-model-pipeline-transforms-appendbui-load-state-dict"]], "urbanlc.model.pipeline_transforms.AppendBUI.modules": [[306, "urbanlc-model-pipeline-transforms-appendbui-modules"]], "urbanlc.model.pipeline_transforms.AppendBUI.named_buffers": [[307, "urbanlc-model-pipeline-transforms-appendbui-named-buffers"]], "urbanlc.model.pipeline_transforms.AppendBUI.named_children": [[308, "urbanlc-model-pipeline-transforms-appendbui-named-children"]], "urbanlc.model.pipeline_transforms.AppendBUI.named_modules": [[309, "urbanlc-model-pipeline-transforms-appendbui-named-modules"]], "urbanlc.model.pipeline_transforms.AppendBUI.named_parameters": [[310, "urbanlc-model-pipeline-transforms-appendbui-named-parameters"]], "urbanlc.model.pipeline_transforms.AppendBUI.parameters": [[311, "urbanlc-model-pipeline-transforms-appendbui-parameters"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_backward_hook": [[312, "urbanlc-model-pipeline-transforms-appendbui-register-backward-hook"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_buffer": [[313, "urbanlc-model-pipeline-transforms-appendbui-register-buffer"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_forward_hook": [[314, "urbanlc-model-pipeline-transforms-appendbui-register-forward-hook"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_forward_pre_hook": [[315, "urbanlc-model-pipeline-transforms-appendbui-register-forward-pre-hook"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_full_backward_hook": [[316, "urbanlc-model-pipeline-transforms-appendbui-register-full-backward-hook"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_load_state_dict_post_hook": [[317, "urbanlc-model-pipeline-transforms-appendbui-register-load-state-dict-post-hook"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_module": [[318, "urbanlc-model-pipeline-transforms-appendbui-register-module"]], "urbanlc.model.pipeline_transforms.AppendBUI.register_parameter": [[319, "urbanlc-model-pipeline-transforms-appendbui-register-parameter"]], "urbanlc.model.pipeline_transforms.AppendBUI.requires_grad_": [[320, "urbanlc-model-pipeline-transforms-appendbui-requires-grad"]], "urbanlc.model.pipeline_transforms.AppendBUI.set_extra_state": [[321, "urbanlc-model-pipeline-transforms-appendbui-set-extra-state"]], "urbanlc.model.pipeline_transforms.AppendBUI.set_rng_device_and_dtype": [[322, "urbanlc-model-pipeline-transforms-appendbui-set-rng-device-and-dtype"]], "urbanlc.model.pipeline_transforms.AppendBUI.share_memory": [[323, "urbanlc-model-pipeline-transforms-appendbui-share-memory"]], "urbanlc.model.pipeline_transforms.AppendBUI.state_dict": [[324, "urbanlc-model-pipeline-transforms-appendbui-state-dict"]], "urbanlc.model.pipeline_transforms.AppendBUI.to": [[325, "urbanlc-model-pipeline-transforms-appendbui-to"]], "urbanlc.model.pipeline_transforms.AppendBUI.to_empty": [[326, "urbanlc-model-pipeline-transforms-appendbui-to-empty"]], "urbanlc.model.pipeline_transforms.AppendBUI.train": [[327, "urbanlc-model-pipeline-transforms-appendbui-train"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_boxes": [[328, "urbanlc-model-pipeline-transforms-appendbui-transform-boxes"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_classes": [[329, "urbanlc-model-pipeline-transforms-appendbui-transform-classes"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_inputs": [[330, "urbanlc-model-pipeline-transforms-appendbui-transform-inputs"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_keypoints": [[331, "urbanlc-model-pipeline-transforms-appendbui-transform-keypoints"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_masks": [[332, "urbanlc-model-pipeline-transforms-appendbui-transform-masks"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_output_tensor": [[334, "urbanlc-model-pipeline-transforms-appendbui-transform-output-tensor"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_tensor": [[335, "urbanlc-model-pipeline-transforms-appendbui-transform-tensor"]], "urbanlc.model.pipeline_transforms.AppendBUI.type": [[336, "urbanlc-model-pipeline-transforms-appendbui-type"]], "urbanlc.model.pipeline_transforms.AppendBUI.validate_tensor": [[337, "urbanlc-model-pipeline-transforms-appendbui-validate-tensor"]], "urbanlc.model.pipeline_transforms.AppendBUI.xpu": [[338, "urbanlc-model-pipeline-transforms-appendbui-xpu"]], "urbanlc.model.pipeline_transforms.AppendBUI.zero_grad": [[339, "urbanlc-model-pipeline-transforms-appendbui-zero-grad"]], "urbanlc.model.train_utils.combine_prediction": [[359, "urbanlc-model-train-utils-combine-prediction"]], "urbanlc.model.train_utils.load_checkpoint": [[360, "urbanlc-model-train-utils-load-checkpoint"]], "urbanlc.model.train_utils.save_checkpoint": [[361, "urbanlc-model-train-utils-save-checkpoint"]], "urbanlc.model.train_utils.segment_satelite_image": [[362, "urbanlc-model-train-utils-segment-satelite-image"]], "urbanlc.model.train_utils.set_seed": [[363, "urbanlc-model-train-utils-set-seed"]], "urbanlc.utils.export_geotiff": [[365, "urbanlc-utils-export-geotiff"]], "urbanlc.utils.open_at_scale": [[366, "urbanlc-utils-open-at-scale"]], "urbanlc.utils.open_at_size": [[367, "urbanlc-utils-open-at-size"]], "Test": [[370, "test"]], "urbanlc.model.pipeline_transforms": [[19, "module-urbanlc.model.pipeline_transforms"], [260, "module-urbanlc.model.pipeline_transforms"]], "urbanlc.model.pipeline_transforms.AppendBUI": [[261, "urbanlc-model-pipeline-transforms-appendbui"]], "urbanlc.model.pipeline_transforms.AppendBUI.T_destination": [[262, "urbanlc-model-pipeline-transforms-appendbui-t-destination"]], "urbanlc.model.pipeline_transforms.AppendBUI.apply_transform": [[272, "urbanlc-model-pipeline-transforms-appendbui-apply-transform"]], "urbanlc.model.pipeline_transforms.AppendBUI.dump_patches": [[285, "urbanlc-model-pipeline-transforms-appendbui-dump-patches"]], "urbanlc.model.pipeline_transforms.AppendBUI.transform_matrix": [[333, "urbanlc-model-pipeline-transforms-appendbui-transform-matrix"]], "urbanlc.model.pipeline_transforms.LandsatTransformer": [[340, "urbanlc-model-pipeline-transforms-landsattransformer"]], "urbanlc.model.pipeline_transforms.LandsatTransformer.calculate_statistics": [[341, "urbanlc-model-pipeline-transforms-landsattransformer-calculate-statistics"]], "urbanlc.model.pipeline_transforms.LandsatTransformer.transform": [[342, "urbanlc-model-pipeline-transforms-landsattransformer-transform"]], "urbanlc.model.pipeline_transforms.MSSTransformer": [[343, "urbanlc-model-pipeline-transforms-msstransformer"]], "urbanlc.model.pipeline_transforms.MSSTransformer.calculate_statistics": [[344, "urbanlc-model-pipeline-transforms-msstransformer-calculate-statistics"]], "urbanlc.model.pipeline_transforms.MSSTransformer.transform": [[345, "urbanlc-model-pipeline-transforms-msstransformer-transform"]], "urbanlc.model.pipeline_transforms.OLITIRSTransformer": [[346, "urbanlc-model-pipeline-transforms-olitirstransformer"]], "urbanlc.model.pipeline_transforms.OLITIRSTransformer.calculate_statistics": [[347, "urbanlc-model-pipeline-transforms-olitirstransformer-calculate-statistics"]], "urbanlc.model.pipeline_transforms.OLITIRSTransformer.transform": [[348, "urbanlc-model-pipeline-transforms-olitirstransformer-transform"]], "urbanlc.model.pipeline_transforms.TMTransformer": [[349, "urbanlc-model-pipeline-transforms-tmtransformer"]], "urbanlc.model.pipeline_transforms.TMTransformer.calculate_statistics": [[350, "urbanlc-model-pipeline-transforms-tmtransformer-calculate-statistics"]], "urbanlc.model.pipeline_transforms.TMTransformer.transform": [[351, "urbanlc-model-pipeline-transforms-tmtransformer-transform"]], "urbanlc.model.pipeline_transforms.compute_BUI": [[352, "urbanlc-model-pipeline-transforms-compute-bui"]], "urbanlc.model.pipeline_transforms.compute_NDBI": [[353, "urbanlc-model-pipeline-transforms-compute-ndbi"]], "urbanlc.model.pipeline_transforms.compute_NDVI": [[354, "urbanlc-model-pipeline-transforms-compute-ndvi"]], "urbanlc.model.pipeline_transforms.compute_NDWI": [[355, "urbanlc-model-pipeline-transforms-compute-ndwi"]], "urbanlc.model.pipeline_transforms.mix_patch": [[356, "urbanlc-model-pipeline-transforms-mix-patch"]], "urbanlc.model.pipeline_transforms.rand_bbox": [[357, "urbanlc-model-pipeline-transforms-rand-bbox"]], "urbanlc.analyze.evaluate": [[3, "module-urbanlc.analyze.evaluate"]], "urbanlc.analyze.metrics": [[4, "module-urbanlc.analyze.metrics"], [23, "module-urbanlc.analyze.metrics"]], "urbanlc.model.dataloader": [[16, "module-urbanlc.model.dataloader"], [158, "module-urbanlc.model.dataloader"]], "urbanlc.model.deep_learning": [[17, "module-urbanlc.model.deep_learning"], [197, "module-urbanlc.model.deep_learning"]], "urbanlc.analyze.metrics.accuracy": [[24, "urbanlc-analyze-metrics-accuracy"]], "urbanlc.analyze.metrics.cohen_kappa": [[25, "urbanlc-analyze-metrics-cohen-kappa"]], "urbanlc.analyze.metrics.confusion_matrix": [[26, "urbanlc-analyze-metrics-confusion-matrix"]], "urbanlc.analyze.metrics.get_class_distribution": [[27, "urbanlc-analyze-metrics-get-class-distribution"]], "urbanlc.analyze.metrics.producer_accuracy": [[28, "urbanlc-analyze-metrics-producer-accuracy"]], "urbanlc.analyze.metrics.user_accuracy": [[29, "urbanlc-analyze-metrics-user-accuracy"]], "urbanlc.model.dataloader.CustomRasterDataset": [[159, "urbanlc-model-dataloader-customrasterdataset"]], "urbanlc.model.dataloader.CustomRasterDataset.all_bands": [[160, "urbanlc-model-dataloader-customrasterdataset-all-bands"]], "urbanlc.model.dataloader.CustomRasterDataset.bounds": [[161, "urbanlc-model-dataloader-customrasterdataset-bounds"]], "urbanlc.model.dataloader.CustomRasterDataset.cmap": [[162, "urbanlc-model-dataloader-customrasterdataset-cmap"]], "urbanlc.model.dataloader.CustomRasterDataset.crs": [[163, "urbanlc-model-dataloader-customrasterdataset-crs"]], "urbanlc.model.dataloader.CustomRasterDataset.date_format": [[164, "urbanlc-model-dataloader-customrasterdataset-date-format"]], "urbanlc.model.dataloader.CustomRasterDataset.filename_glob": [[165, "urbanlc-model-dataloader-customrasterdataset-filename-glob"]], "urbanlc.model.dataloader.CustomRasterDataset.filename_regex": [[166, "urbanlc-model-dataloader-customrasterdataset-filename-regex"]], "urbanlc.model.dataloader.CustomRasterDataset.is_image": [[167, "urbanlc-model-dataloader-customrasterdataset-is-image"]], "urbanlc.model.dataloader.CustomRasterDataset.rgb_bands": [[168, "urbanlc-model-dataloader-customrasterdataset-rgb-bands"]], "urbanlc.model.dataloader.CustomRasterDataset.separate_files": [[169, "urbanlc-model-dataloader-customrasterdataset-separate-files"]], "urbanlc.model.dataloader.ESA2021": [[170, "urbanlc-model-dataloader-esa2021"]], "urbanlc.model.dataloader.ESA2021.all_bands": [[171, "urbanlc-model-dataloader-esa2021-all-bands"]], "urbanlc.model.dataloader.ESA2021.bounds": [[172, "urbanlc-model-dataloader-esa2021-bounds"]], "urbanlc.model.dataloader.ESA2021.cmap": [[173, "urbanlc-model-dataloader-esa2021-cmap"]], "urbanlc.model.dataloader.ESA2021.crs": [[174, "urbanlc-model-dataloader-esa2021-crs"]], "urbanlc.model.dataloader.ESA2021.date_format": [[175, "urbanlc-model-dataloader-esa2021-date-format"]], "urbanlc.model.dataloader.ESA2021.filename_glob": [[176, "urbanlc-model-dataloader-esa2021-filename-glob"]], "urbanlc.model.dataloader.ESA2021.filename_regex": [[177, "urbanlc-model-dataloader-esa2021-filename-regex"]], "urbanlc.model.dataloader.ESA2021.is_image": [[178, "urbanlc-model-dataloader-esa2021-is-image"]], "urbanlc.model.dataloader.ESA2021.rgb_bands": [[179, "urbanlc-model-dataloader-esa2021-rgb-bands"]], "urbanlc.model.dataloader.ESA2021.separate_files": [[180, "urbanlc-model-dataloader-esa2021-separate-files"]], "urbanlc.model.dataloader.Landsat": [[181, "urbanlc-model-dataloader-landsat"]], "urbanlc.model.dataloader.Landsat.MSS": [[182, "urbanlc-model-dataloader-landsat-mss"]], "urbanlc.model.dataloader.Landsat.OLITIRS": [[183, "urbanlc-model-dataloader-landsat-olitirs"]], "urbanlc.model.dataloader.Landsat.TM": [[184, "urbanlc-model-dataloader-landsat-tm"]], "urbanlc.model.dataloader.Landsat.all_bands": [[185, "urbanlc-model-dataloader-landsat-all-bands"]], "urbanlc.model.dataloader.Landsat.bounds": [[186, "urbanlc-model-dataloader-landsat-bounds"]], "urbanlc.model.dataloader.Landsat.cmap": [[187, "urbanlc-model-dataloader-landsat-cmap"]], "urbanlc.model.dataloader.Landsat.crs": [[188, "urbanlc-model-dataloader-landsat-crs"]], "urbanlc.model.dataloader.Landsat.date_format": [[189, "urbanlc-model-dataloader-landsat-date-format"]], "urbanlc.model.dataloader.Landsat.filename_glob": [[190, "urbanlc-model-dataloader-landsat-filename-glob"]], "urbanlc.model.dataloader.Landsat.filename_regex": [[191, "urbanlc-model-dataloader-landsat-filename-regex"]], "urbanlc.model.dataloader.Landsat.is_image": [[192, "urbanlc-model-dataloader-landsat-is-image"]], "urbanlc.model.dataloader.Landsat.rgb_bands": [[193, "urbanlc-model-dataloader-landsat-rgb-bands"]], "urbanlc.model.dataloader.Landsat.separate_files": [[194, "urbanlc-model-dataloader-landsat-separate-files"]], "urbanlc.model.dataloader.get_dataloader": [[195, "urbanlc-model-dataloader-get-dataloader"]], "urbanlc.model.dataloader.parse_paths": [[196, "urbanlc-model-dataloader-parse-paths"]], "urbanlc.model.deep_learning.DeepLearningLCC": [[198, "urbanlc-model-deep-learning-deeplearninglcc"]], "urbanlc.model.deep_learning.DeepLearningLCC.build_model": [[199, "urbanlc-model-deep-learning-deeplearninglcc-build-model"]], "urbanlc.model.deep_learning.DeepLearningLCC.denormalize_class": [[201, "urbanlc-model-deep-learning-deeplearninglcc-denormalize-class"]], "urbanlc.model.deep_learning.DeepLearningLCC.get_metrics": [[202, "urbanlc-model-deep-learning-deeplearninglcc-get-metrics"]], "urbanlc.model.deep_learning.DeepLearningLCC.infer": [[203, "urbanlc-model-deep-learning-deeplearninglcc-infer"]], "urbanlc.model.deep_learning.DeepLearningLCC.load_model": [[204, "urbanlc-model-deep-learning-deeplearninglcc-load-model"]], "urbanlc.model.deep_learning.DeepLearningLCC.normalize_class": [[205, "urbanlc-model-deep-learning-deeplearninglcc-normalize-class"]], "urbanlc.model.deep_learning.DeepLearningLCC.save_model": [[206, "urbanlc-model-deep-learning-deeplearninglcc-save-model"]], "urbanlc.model.deep_learning.DeepLearningLCC.set_device": [[207, "urbanlc-model-deep-learning-deeplearninglcc-set-device"]], "urbanlc.model.deep_learning.DeepLearningLCC.setup_trainer": [[208, "urbanlc-model-deep-learning-deeplearninglcc-setup-trainer"]], "urbanlc.model.deep_learning.DeepLearningLCC.to": [[209, "urbanlc-model-deep-learning-deeplearninglcc-to"]], "urbanlc.model.deep_learning.DeepLearningLCC.train": [[210, "urbanlc-model-deep-learning-deeplearninglcc-train"]], "urbanlc.model.deep_learning.DeepLearningLCC.train_one_epoch": [[211, "urbanlc-model-deep-learning-deeplearninglcc-train-one-epoch"]], "urbanlc.model.deep_learning.DeepLearningLCC.validate": [[212, "urbanlc-model-deep-learning-deeplearninglcc-validate"]], "urbanlc.model.deep_learning.MSSDeepLearning": [[213, "urbanlc-model-deep-learning-mssdeeplearning"]], "urbanlc.model.deep_learning.MSSDeepLearning.build_model": [[214, "urbanlc-model-deep-learning-mssdeeplearning-build-model"]], "urbanlc.model.deep_learning.MSSDeepLearning.denormalize_class": [[216, "urbanlc-model-deep-learning-mssdeeplearning-denormalize-class"]], "urbanlc.model.deep_learning.MSSDeepLearning.get_metrics": [[217, "urbanlc-model-deep-learning-mssdeeplearning-get-metrics"]], "urbanlc.model.deep_learning.MSSDeepLearning.infer": [[218, "urbanlc-model-deep-learning-mssdeeplearning-infer"]], "urbanlc.model.deep_learning.MSSDeepLearning.load_model": [[219, "urbanlc-model-deep-learning-mssdeeplearning-load-model"]], "urbanlc.model.deep_learning.MSSDeepLearning.normalize_class": [[220, "urbanlc-model-deep-learning-mssdeeplearning-normalize-class"]], "urbanlc.model.deep_learning.MSSDeepLearning.save_model": [[221, "urbanlc-model-deep-learning-mssdeeplearning-save-model"]], "urbanlc.model.deep_learning.MSSDeepLearning.set_device": [[222, "urbanlc-model-deep-learning-mssdeeplearning-set-device"]], "urbanlc.model.deep_learning.MSSDeepLearning.setup_trainer": [[223, "urbanlc-model-deep-learning-mssdeeplearning-setup-trainer"]], "urbanlc.model.deep_learning.MSSDeepLearning.to": [[224, "urbanlc-model-deep-learning-mssdeeplearning-to"]], "urbanlc.model.deep_learning.MSSDeepLearning.train": [[225, "urbanlc-model-deep-learning-mssdeeplearning-train"]], "urbanlc.model.deep_learning.MSSDeepLearning.train_one_epoch": [[226, "urbanlc-model-deep-learning-mssdeeplearning-train-one-epoch"]], "urbanlc.model.deep_learning.MSSDeepLearning.validate": [[227, "urbanlc-model-deep-learning-mssdeeplearning-validate"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning": [[228, "urbanlc-model-deep-learning-olitirsdeeplearning"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.build_model": [[229, "urbanlc-model-deep-learning-olitirsdeeplearning-build-model"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.denormalize_class": [[231, "urbanlc-model-deep-learning-olitirsdeeplearning-denormalize-class"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.get_metrics": [[232, "urbanlc-model-deep-learning-olitirsdeeplearning-get-metrics"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.infer": [[233, "urbanlc-model-deep-learning-olitirsdeeplearning-infer"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.load_model": [[234, "urbanlc-model-deep-learning-olitirsdeeplearning-load-model"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.normalize_class": [[235, "urbanlc-model-deep-learning-olitirsdeeplearning-normalize-class"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.save_model": [[236, "urbanlc-model-deep-learning-olitirsdeeplearning-save-model"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.set_device": [[237, "urbanlc-model-deep-learning-olitirsdeeplearning-set-device"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.setup_trainer": [[238, "urbanlc-model-deep-learning-olitirsdeeplearning-setup-trainer"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.to": [[239, "urbanlc-model-deep-learning-olitirsdeeplearning-to"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.train": [[240, "urbanlc-model-deep-learning-olitirsdeeplearning-train"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.train_one_epoch": [[241, "urbanlc-model-deep-learning-olitirsdeeplearning-train-one-epoch"]], "urbanlc.model.deep_learning.OLITIRSDeepLearning.validate": [[242, "urbanlc-model-deep-learning-olitirsdeeplearning-validate"]], "urbanlc.model.deep_learning.TMDeepLearning": [[243, "urbanlc-model-deep-learning-tmdeeplearning"]], "urbanlc.model.deep_learning.TMDeepLearning.build_model": [[244, "urbanlc-model-deep-learning-tmdeeplearning-build-model"]], "urbanlc.model.deep_learning.TMDeepLearning.denormalize_class": [[246, "urbanlc-model-deep-learning-tmdeeplearning-denormalize-class"]], "urbanlc.model.deep_learning.TMDeepLearning.get_metrics": [[247, "urbanlc-model-deep-learning-tmdeeplearning-get-metrics"]], "urbanlc.model.deep_learning.TMDeepLearning.infer": [[248, "urbanlc-model-deep-learning-tmdeeplearning-infer"]], "urbanlc.model.deep_learning.TMDeepLearning.load_model": [[249, "urbanlc-model-deep-learning-tmdeeplearning-load-model"]], "urbanlc.model.deep_learning.TMDeepLearning.normalize_class": [[250, "urbanlc-model-deep-learning-tmdeeplearning-normalize-class"]], "urbanlc.model.deep_learning.TMDeepLearning.save_model": [[251, "urbanlc-model-deep-learning-tmdeeplearning-save-model"]], "urbanlc.model.deep_learning.TMDeepLearning.set_device": [[252, "urbanlc-model-deep-learning-tmdeeplearning-set-device"]], "urbanlc.model.deep_learning.TMDeepLearning.setup_trainer": [[253, "urbanlc-model-deep-learning-tmdeeplearning-setup-trainer"]], "urbanlc.model.deep_learning.TMDeepLearning.to": [[254, "urbanlc-model-deep-learning-tmdeeplearning-to"]], "urbanlc.model.deep_learning.TMDeepLearning.train": [[255, "urbanlc-model-deep-learning-tmdeeplearning-train"]], "urbanlc.model.deep_learning.TMDeepLearning.train_one_epoch": [[256, "urbanlc-model-deep-learning-tmdeeplearning-train-one-epoch"]], "urbanlc.model.deep_learning.TMDeepLearning.validate": [[257, "urbanlc-model-deep-learning-tmdeeplearning-validate"]], "UrbanLC reference documentation": [[368, "urbanlc-reference-documentation"]], "API documentation": [[368, null]]}, "indexentries": {"module": [[1, "module-urbanlc.analyze"], [3, "module-urbanlc.analyze.evaluate"], [4, "module-urbanlc.analyze.metrics"], [13, "module-urbanlc.model"], [16, "module-urbanlc.model.dataloader"], [17, "module-urbanlc.model.deep_learning"], [23, "module-urbanlc.analyze.metrics"], [158, "module-urbanlc.model.dataloader"], [197, "module-urbanlc.model.deep_learning"]], "urbanlc.analyze": [[1, "module-urbanlc.analyze"]], "urbanlc.analyze.evaluate": [[3, "module-urbanlc.analyze.evaluate"]], "urbanlc.analyze.metrics": [[4, "module-urbanlc.analyze.metrics"], [23, "module-urbanlc.analyze.metrics"]], "urbanlc.model": [[13, "module-urbanlc.model"]], "urbanlc.model.dataloader": [[16, "module-urbanlc.model.dataloader"], [158, "module-urbanlc.model.dataloader"]], "urbanlc.model.deep_learning": [[17, "module-urbanlc.model.deep_learning"], [197, "module-urbanlc.model.deep_learning"]], "accuracy() (in module urbanlc.analyze.metrics)": [[24, "urbanlc.analyze.metrics.accuracy"]], "cohen_kappa() (in module urbanlc.analyze.metrics)": [[25, "urbanlc.analyze.metrics.cohen_kappa"]], "confusion_matrix() (in module urbanlc.analyze.metrics)": [[26, "urbanlc.analyze.metrics.confusion_matrix"]], "get_class_distribution() (in module urbanlc.analyze.metrics)": [[27, "urbanlc.analyze.metrics.get_class_distribution"]], "producer_accuracy() (in module urbanlc.analyze.metrics)": [[28, "urbanlc.analyze.metrics.producer_accuracy"]], "user_accuracy() (in module urbanlc.analyze.metrics)": [[29, "urbanlc.analyze.metrics.user_accuracy"]], "customrasterdataset (class in urbanlc.model.dataloader)": [[159, "urbanlc.model.dataloader.CustomRasterDataset"]], "all_bands (urbanlc.model.dataloader.customrasterdataset attribute)": [[160, "urbanlc.model.dataloader.CustomRasterDataset.all_bands"]], "bounds (urbanlc.model.dataloader.customrasterdataset property)": [[161, "urbanlc.model.dataloader.CustomRasterDataset.bounds"]], "cmap (urbanlc.model.dataloader.customrasterdataset attribute)": [[162, "urbanlc.model.dataloader.CustomRasterDataset.cmap"]], "crs (urbanlc.model.dataloader.customrasterdataset property)": [[163, "urbanlc.model.dataloader.CustomRasterDataset.crs"]], "date_format (urbanlc.model.dataloader.customrasterdataset attribute)": [[164, "urbanlc.model.dataloader.CustomRasterDataset.date_format"]], "filename_glob (urbanlc.model.dataloader.customrasterdataset attribute)": [[165, "urbanlc.model.dataloader.CustomRasterDataset.filename_glob"]], "filename_regex (urbanlc.model.dataloader.customrasterdataset attribute)": [[166, "urbanlc.model.dataloader.CustomRasterDataset.filename_regex"]], "is_image (urbanlc.model.dataloader.customrasterdataset attribute)": [[167, "urbanlc.model.dataloader.CustomRasterDataset.is_image"]], "rgb_bands (urbanlc.model.dataloader.customrasterdataset attribute)": [[168, "urbanlc.model.dataloader.CustomRasterDataset.rgb_bands"]], "separate_files (urbanlc.model.dataloader.customrasterdataset attribute)": [[169, "urbanlc.model.dataloader.CustomRasterDataset.separate_files"]], "esa2021 (class in urbanlc.model.dataloader)": [[170, "urbanlc.model.dataloader.ESA2021"]], "all_bands (urbanlc.model.dataloader.esa2021 attribute)": [[171, "urbanlc.model.dataloader.ESA2021.all_bands"]], "bounds (urbanlc.model.dataloader.esa2021 property)": [[172, "urbanlc.model.dataloader.ESA2021.bounds"]], "cmap (urbanlc.model.dataloader.esa2021 attribute)": [[173, "urbanlc.model.dataloader.ESA2021.cmap"]], "crs (urbanlc.model.dataloader.esa2021 property)": [[174, "urbanlc.model.dataloader.ESA2021.crs"]], "date_format (urbanlc.model.dataloader.esa2021 attribute)": [[175, "urbanlc.model.dataloader.ESA2021.date_format"]], "filename_glob (urbanlc.model.dataloader.esa2021 attribute)": [[176, "urbanlc.model.dataloader.ESA2021.filename_glob"]], "filename_regex (urbanlc.model.dataloader.esa2021 attribute)": [[177, "urbanlc.model.dataloader.ESA2021.filename_regex"]], "is_image (urbanlc.model.dataloader.esa2021 attribute)": [[178, "urbanlc.model.dataloader.ESA2021.is_image"]], "rgb_bands (urbanlc.model.dataloader.esa2021 attribute)": [[179, "urbanlc.model.dataloader.ESA2021.rgb_bands"]], "separate_files (urbanlc.model.dataloader.esa2021 attribute)": [[180, "urbanlc.model.dataloader.ESA2021.separate_files"]], "landsat (class in urbanlc.model.dataloader)": [[181, "urbanlc.model.dataloader.Landsat"]], "mss() (urbanlc.model.dataloader.landsat class method)": [[182, "urbanlc.model.dataloader.Landsat.MSS"]], "olitirs() (urbanlc.model.dataloader.landsat class method)": [[183, "urbanlc.model.dataloader.Landsat.OLITIRS"]], "tm() (urbanlc.model.dataloader.landsat class method)": [[184, "urbanlc.model.dataloader.Landsat.TM"]], "all_bands (urbanlc.model.dataloader.landsat attribute)": [[185, "urbanlc.model.dataloader.Landsat.all_bands"]], "bounds (urbanlc.model.dataloader.landsat property)": [[186, "urbanlc.model.dataloader.Landsat.bounds"]], "cmap (urbanlc.model.dataloader.landsat attribute)": [[187, "urbanlc.model.dataloader.Landsat.cmap"]], "crs (urbanlc.model.dataloader.landsat property)": [[188, "urbanlc.model.dataloader.Landsat.crs"]], "date_format (urbanlc.model.dataloader.landsat attribute)": [[189, "urbanlc.model.dataloader.Landsat.date_format"]], "filename_glob (urbanlc.model.dataloader.landsat attribute)": [[190, "urbanlc.model.dataloader.Landsat.filename_glob"]], "filename_regex (urbanlc.model.dataloader.landsat attribute)": [[191, "urbanlc.model.dataloader.Landsat.filename_regex"]], "is_image (urbanlc.model.dataloader.landsat attribute)": [[192, "urbanlc.model.dataloader.Landsat.is_image"]], "rgb_bands (urbanlc.model.dataloader.landsat attribute)": [[193, "urbanlc.model.dataloader.Landsat.rgb_bands"]], "separate_files (urbanlc.model.dataloader.landsat attribute)": [[194, "urbanlc.model.dataloader.Landsat.separate_files"]], "get_dataloader() (in module urbanlc.model.dataloader)": [[195, "urbanlc.model.dataloader.get_dataloader"]], "parse_paths() (in module urbanlc.model.dataloader)": [[196, "urbanlc.model.dataloader.parse_paths"]], "deeplearninglcc (class in urbanlc.model.deep_learning)": [[198, "urbanlc.model.deep_learning.DeepLearningLCC"]], "build_model() (urbanlc.model.deep_learning.deeplearninglcc method)": [[199, "urbanlc.model.deep_learning.DeepLearningLCC.build_model"]], "denormalize_class() (urbanlc.model.deep_learning.deeplearninglcc method)": [[201, "urbanlc.model.deep_learning.DeepLearningLCC.denormalize_class"]], "get_metrics() (urbanlc.model.deep_learning.deeplearninglcc method)": [[202, "urbanlc.model.deep_learning.DeepLearningLCC.get_metrics"]], "infer() (urbanlc.model.deep_learning.deeplearninglcc method)": [[203, "urbanlc.model.deep_learning.DeepLearningLCC.infer"]], "load_model() (urbanlc.model.deep_learning.deeplearninglcc method)": [[204, "urbanlc.model.deep_learning.DeepLearningLCC.load_model"]], "normalize_class() (urbanlc.model.deep_learning.deeplearninglcc method)": [[205, "urbanlc.model.deep_learning.DeepLearningLCC.normalize_class"]], "save_model() (urbanlc.model.deep_learning.deeplearninglcc method)": [[206, "urbanlc.model.deep_learning.DeepLearningLCC.save_model"]], "set_device() (urbanlc.model.deep_learning.deeplearninglcc method)": [[207, "urbanlc.model.deep_learning.DeepLearningLCC.set_device"]], "setup_trainer() (urbanlc.model.deep_learning.deeplearninglcc method)": [[208, "urbanlc.model.deep_learning.DeepLearningLCC.setup_trainer"]], "to() (urbanlc.model.deep_learning.deeplearninglcc method)": [[209, "urbanlc.model.deep_learning.DeepLearningLCC.to"]], "train() (urbanlc.model.deep_learning.deeplearninglcc method)": [[210, "urbanlc.model.deep_learning.DeepLearningLCC.train"]], "train_one_epoch() (urbanlc.model.deep_learning.deeplearninglcc method)": [[211, "urbanlc.model.deep_learning.DeepLearningLCC.train_one_epoch"]], "validate() (urbanlc.model.deep_learning.deeplearninglcc method)": [[212, "urbanlc.model.deep_learning.DeepLearningLCC.validate"]], "mssdeeplearning (class in urbanlc.model.deep_learning)": [[213, "urbanlc.model.deep_learning.MSSDeepLearning"]], "build_model() (urbanlc.model.deep_learning.mssdeeplearning method)": [[214, "urbanlc.model.deep_learning.MSSDeepLearning.build_model"]], "denormalize_class() (urbanlc.model.deep_learning.mssdeeplearning method)": [[216, "urbanlc.model.deep_learning.MSSDeepLearning.denormalize_class"]], "get_metrics() (urbanlc.model.deep_learning.mssdeeplearning method)": [[217, "urbanlc.model.deep_learning.MSSDeepLearning.get_metrics"]], "infer() (urbanlc.model.deep_learning.mssdeeplearning method)": [[218, "urbanlc.model.deep_learning.MSSDeepLearning.infer"]], "load_model() (urbanlc.model.deep_learning.mssdeeplearning method)": [[219, "urbanlc.model.deep_learning.MSSDeepLearning.load_model"]], "normalize_class() (urbanlc.model.deep_learning.mssdeeplearning method)": [[220, "urbanlc.model.deep_learning.MSSDeepLearning.normalize_class"]], "save_model() (urbanlc.model.deep_learning.mssdeeplearning method)": [[221, "urbanlc.model.deep_learning.MSSDeepLearning.save_model"]], "set_device() (urbanlc.model.deep_learning.mssdeeplearning method)": [[222, "urbanlc.model.deep_learning.MSSDeepLearning.set_device"]], "setup_trainer() (urbanlc.model.deep_learning.mssdeeplearning method)": [[223, "urbanlc.model.deep_learning.MSSDeepLearning.setup_trainer"]], "to() (urbanlc.model.deep_learning.mssdeeplearning method)": [[224, "urbanlc.model.deep_learning.MSSDeepLearning.to"]], "train() (urbanlc.model.deep_learning.mssdeeplearning method)": [[225, "urbanlc.model.deep_learning.MSSDeepLearning.train"]], "train_one_epoch() (urbanlc.model.deep_learning.mssdeeplearning method)": [[226, "urbanlc.model.deep_learning.MSSDeepLearning.train_one_epoch"]], "validate() (urbanlc.model.deep_learning.mssdeeplearning method)": [[227, "urbanlc.model.deep_learning.MSSDeepLearning.validate"]], "olitirsdeeplearning (class in urbanlc.model.deep_learning)": [[228, "urbanlc.model.deep_learning.OLITIRSDeepLearning"]], "build_model() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[229, "urbanlc.model.deep_learning.OLITIRSDeepLearning.build_model"]], "denormalize_class() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[231, "urbanlc.model.deep_learning.OLITIRSDeepLearning.denormalize_class"]], "get_metrics() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[232, "urbanlc.model.deep_learning.OLITIRSDeepLearning.get_metrics"]], "infer() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[233, "urbanlc.model.deep_learning.OLITIRSDeepLearning.infer"]], "load_model() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[234, "urbanlc.model.deep_learning.OLITIRSDeepLearning.load_model"]], "normalize_class() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[235, "urbanlc.model.deep_learning.OLITIRSDeepLearning.normalize_class"]], "save_model() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[236, "urbanlc.model.deep_learning.OLITIRSDeepLearning.save_model"]], "set_device() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[237, "urbanlc.model.deep_learning.OLITIRSDeepLearning.set_device"]], "setup_trainer() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[238, "urbanlc.model.deep_learning.OLITIRSDeepLearning.setup_trainer"]], "to() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[239, "urbanlc.model.deep_learning.OLITIRSDeepLearning.to"]], "train() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[240, "urbanlc.model.deep_learning.OLITIRSDeepLearning.train"]], "train_one_epoch() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[241, "urbanlc.model.deep_learning.OLITIRSDeepLearning.train_one_epoch"]], "validate() (urbanlc.model.deep_learning.olitirsdeeplearning method)": [[242, "urbanlc.model.deep_learning.OLITIRSDeepLearning.validate"]], "tmdeeplearning (class in urbanlc.model.deep_learning)": [[243, "urbanlc.model.deep_learning.TMDeepLearning"]], "build_model() (urbanlc.model.deep_learning.tmdeeplearning method)": [[244, "urbanlc.model.deep_learning.TMDeepLearning.build_model"]], "denormalize_class() (urbanlc.model.deep_learning.tmdeeplearning method)": [[246, "urbanlc.model.deep_learning.TMDeepLearning.denormalize_class"]], "get_metrics() (urbanlc.model.deep_learning.tmdeeplearning method)": [[247, "urbanlc.model.deep_learning.TMDeepLearning.get_metrics"]], "infer() (urbanlc.model.deep_learning.tmdeeplearning method)": [[248, "urbanlc.model.deep_learning.TMDeepLearning.infer"]], "load_model() (urbanlc.model.deep_learning.tmdeeplearning method)": [[249, "urbanlc.model.deep_learning.TMDeepLearning.load_model"]], "normalize_class() (urbanlc.model.deep_learning.tmdeeplearning method)": [[250, "urbanlc.model.deep_learning.TMDeepLearning.normalize_class"]], "save_model() (urbanlc.model.deep_learning.tmdeeplearning method)": [[251, "urbanlc.model.deep_learning.TMDeepLearning.save_model"]], "set_device() (urbanlc.model.deep_learning.tmdeeplearning method)": [[252, "urbanlc.model.deep_learning.TMDeepLearning.set_device"]], "setup_trainer() (urbanlc.model.deep_learning.tmdeeplearning method)": [[253, "urbanlc.model.deep_learning.TMDeepLearning.setup_trainer"]], "to() (urbanlc.model.deep_learning.tmdeeplearning method)": [[254, "urbanlc.model.deep_learning.TMDeepLearning.to"]], "train() (urbanlc.model.deep_learning.tmdeeplearning method)": [[255, "urbanlc.model.deep_learning.TMDeepLearning.train"]], "train_one_epoch() (urbanlc.model.deep_learning.tmdeeplearning method)": [[256, "urbanlc.model.deep_learning.TMDeepLearning.train_one_epoch"]], "validate() (urbanlc.model.deep_learning.tmdeeplearning method)": [[257, "urbanlc.model.deep_learning.TMDeepLearning.validate"]]}})